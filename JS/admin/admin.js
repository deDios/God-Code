
(() => {
  const W = window, D = document, qs = (s, r = D) => r.querySelector(s), qsa = (s, r = D) => [].slice.call(r.querySelectorAll(s)), T = (m, t = "exito", d = 2500) => W.gcToast ? W.gcToast(m, t, d) : console.log("[GC]", t, m); W.GC_DEBUG = !1; function L(...a) { if (W.GC_DEBUG && typeof console !== "undefined") try { console.log("[GC]", ...a) } catch { } }
  const setVH = () => { D.documentElement.style.setProperty("--vh", W.innerHeight * .01 + "px") }; setVH(); W.addEventListener("resize", setVH);

  // -------- ENDPOINTS
  const API_BASE = "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/";
  const API = { cursos: API_BASE + "c_cursos.php", iCursos: API_BASE + "i_cursos.php", uCursos: API_BASE + "u_cursos.php", noticias: API_BASE + "c_noticia.php", uNoticias: API_BASE + "u_noticia.php", comentarios: API_BASE + "c_comentario_noticia.php", tutores: API_BASE + "c_tutor.php", iTutor: API_BASE + "i_tutor.php", uTutor: API_BASE + "u_tutor.php", prioridad: API_BASE + "c_prioridad.php", categorias: API_BASE + "c_categorias.php", calendario: API_BASE + "c_dias_curso.php", tipoEval: API_BASE + "c_tipo_evaluacion.php", actividades: API_BASE + "c_actividades.php" };
  const UPLOAD = { cursoImg: API_BASE + "u_cursoImg.php", tutorImg: API_BASE + "u_tutorImg.php" };
  const ADMIN_IDS = [1, 12, 13];

  // -------- STATE
  const S = { route: "#/cursos", page: 1, pageSize: 10, data: [], raw: [], tutorsMap: null, prioMap: null, catMap: null, calMap: null, tipoMap: null, actMap: null, drawer: null, tmpNewCourseImage: null, tutores: [] }; let CUR_USER = null, IS_ADMIN = !1;

  // -------- HELPERS
  function getUsuarioFromCookie() { const row = (D.cookie || "").split("; ").find(r => r.indexOf("usuario=") === 0); if (!row) return null; const raw = row.split("=")[1] || ""; try { const once = decodeURIComponent(raw); const maybeTwice = /%7B|%22/.test(once) ? decodeURIComponent(once) : once; return JSON.parse(maybeTwice) } catch (e) { return null } }
  async function postJSON(url, body) { L("POST", url, body); const r = await fetch(url, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(body || {}) }); const txt = await r.text().catch(() => ""); L("RESP", r.status, txt); if (!r.ok) throw Error("HTTP " + r.status + " " + (txt || "")); if (!txt.trim()) return {}; try { return JSON.parse(txt) } catch { return { _raw: txt } } }
  const esc = s => String(s == null ? "" : s).replace(/[&<>'"]/g, s => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", "'": "&#39;", '"': "&quot;" }[s])), escA = s => String(s == null ? "" : s).replace(/"/g, "&quot;");
  const fmtDate = d => { if (!d) return "-"; try { const p = ("" + d).split("-"); return (p[2] || "") + "/" + (p[1] || "") + "/" + (p[0] || "") } catch { return d } }, fmtDT = dt => { if (!dt) return "-"; try { const sp = ("" + dt).split(" "); return (fmtDate(sp[0]) + " " + (sp[1] || "")).trim() } catch { return dt } }, fmtMoney = n => { try { return new Intl.NumberFormat("es-MX", { style: "currency", currency: "MXN" }).format(n) } catch { return "$" + n } };
  const pair = (l, v) => `<div class="field"><div class="label">${esc(l)}</div><div class="value">${esc(v != null ? v : "-")}</div></div>`;
  function withBust(u) { try { const x = new URL(u, location.origin); x.searchParams.set("v", Date.now()); return x.pathname + "?" + x.searchParams.toString() } catch { return u + (u.indexOf("?") >= 0 ? "&" : "?") + "v=" + Date.now() } }
  const noImg = () => "data:image/svg+xml;utf8," + encodeURIComponent("<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 160 90'><rect width='100%' height='100%' fill='#f3f3f3'/><path d='M20 70 L60 35 L95 65 L120 50 L140 70' stroke='#c9c9c9' stroke-width='4' fill='none'/><circle cx='52' cy='30' r='8' fill='#c9c9c9'/></svg>");
  const mediaUrlsByType = (t, id) => t === "noticia" ? [`/ASSETS/noticia/NoticiasImg/noticia_img1_${Number(id)}.png`, `/ASSETS/noticia/NoticiasImg/noticia_img2_${Number(id)}.png`] : t === "curso" ? [`/ASSETS/cursos/img${Number(id)}.png`] : [];
  function validarImagen(f, opt) { opt = opt || {}; const max = (opt.maxMB || 2) * 1024 * 1024; if (!f) return { ok: !1, error: "No hay archivo" }; if (!["image/jpeg", "image/png"].includes(f.type)) return { ok: !1, error: "Solo JPG/PNG" }; if (f.size > max) return { ok: !1, error: "La imagen excede " + (opt.maxMB || 2) + "MB" }; return { ok: !0 } }

  // -------- UI COMMON
  function openDrawer(t, html) { const o = qs("#gc-dash-overlay"); o && o.classList && o.classList.add("open"); const d = qs("#gc-drawer"); if (!d) return; qs("#drawer-title") && (qs("#drawer-title").textContent = t || "Detalle"); qs("#drawer-body") && (qs("#drawer-body").innerHTML = html || ""); d.classList && d.classList.add("open"); d.setAttribute("aria-hidden", "false") }
  function closeDrawer() { try { D.activeElement && D.activeElement.blur() } catch { } const o = qs("#gc-dash-overlay"); o && o.classList && o.classList.remove("open"); const d = qs("#gc-drawer"); if (!d) return; d.classList && d.classList.remove("open"); d.setAttribute("aria-hidden", "true"); S.drawer = null }
  function skeleton() { const d = qs("#recursos-list"), m = qs("#recursos-list-mobile"); d && (d.innerHTML = ""); m && (m.innerHTML = ""); const tgt = d || m; if (!tgt) return; for (let i = 0; i < 5; i++)tgt.insertAdjacentHTML("beforeend", '<div class="sk-row"><div class="sk n1"></div><div class="sk n2"></div><div class="sk n3"></div></div>') }
  function paginate(total) { const totalPages = Math.max(1, Math.ceil(total / (S.pageSize || 10)));[qs("#pagination-controls"), qs("#pagination-mobile")].forEach(c => { if (!c) return; c.innerHTML = ""; if (totalPages <= 1) return; const prev = D.createElement("button"); prev.className = "arrow-btn"; prev.textContent = "‹"; prev.disabled = S.page === 1; prev.onclick = () => { S.page = Math.max(1, S.page - 1); refreshCurrent() }; c.appendChild(prev); for (let p = 1; p <= totalPages && p <= 7; p++) { const b = D.createElement("button"); b.className = "page-btn" + (p === S.page ? " active" : ""); b.textContent = p; b.onclick = () => { S.page = p; refreshCurrent() }; c.appendChild(b) } const next = D.createElement("button"); next.className = "arrow-btn"; next.textContent = "›"; next.disabled = S.page === totalPages; next.onclick = () => { S.page = Math.min(totalPages, S.page + 1); refreshCurrent() }; c.appendChild(next) }) }
  function renderList(rows, cfg) {
    const d = qs("#recursos-list"), m = qs("#recursos-list-mobile"); d && (d.innerHTML = ""); m && (m.innerHTML = ""); if (!rows.length) { d && (d.innerHTML = '<div class="empty-state" style="padding:1rem;">Sin resultados</div>'); m && (m.innerHTML = '<div class="empty-state" style="padding:1rem;">Sin resultados</div>'); qs("#mod-count") && (qs("#mod-count").textContent = "0 resultados"); paginate(0); return }
    const start = (S.page - 1) * (S.pageSize || 10), page = rows.slice(start, start + (S.pageSize || 10)); page.forEach(it => { d && d.insertAdjacentHTML("beforeend", cfg.desktopRow(it)); m && m.insertAdjacentHTML("beforeend", cfg.mobileRow(it)) });
    qsa("#recursos-list .table-row").forEach(el => el.addEventListener("click", () => openDrawer(cfg.drawerTitle(el.dataset), cfg.drawerBody(el.dataset))));
    qsa("#recursos-list-mobile .open-drawer").forEach(btn => btn.addEventListener("click", e => { e.stopPropagation(); const host = btn.closest(".table-row-mobile"); openDrawer(cfg.drawerTitle(host.dataset), cfg.drawerBody(host.dataset)) }));
    qs("#mod-count") && (qs("#mod-count").textContent = rows.length + " " + (rows.length === 1 ? "elemento" : "elementos")); paginate(rows.length)
  }
  function applyAdminVisibility(isAdmin) { qsa(".gc-side .nav-item").forEach(a => { if (!isAdmin) { const href = (a.getAttribute("href") || a.dataset.route || "").toLowerCase(); const txt = (a.textContent || "").toLowerCase(); const isCuenta = href.indexOf("#/cuentas") >= 0 || txt.indexOf("cuenta") >= 0; if (!isCuenta) { (a.closest && a.closest("li") ? a.closest("li") : a).style.display = "none"; a.setAttribute("tabindex", "-1"); a.setAttribute("aria-hidden", "true") } } }); const add = qs("#btn-add"); add && (add.style.display = isAdmin ? "" : "none") }
  function enforceGuard() { if (!IS_ADMIN) { const h = (location.hash || "").toLowerCase(); if (h.indexOf("#/cuentas") !== 0) { location.hash = "#/cuentas" } } }

  // -------- CATALOGOS 
  async function getTMap() { if (S.tutorsMap && Date.now() - S.tutorsMap._ts < 18e5) return S.tutorsMap; const arr = await postJSON(API.tutores, { estatus: 1 }); const m = {}; (Array.isArray(arr) ? arr : []).forEach(t => m[t.id] = t.nombre); m._ts = Date.now(); return S.tutorsMap = m }
  async function getPMap() { if (S.prioMap && Date.now() - S.prioMap._ts < 18e5) return S.prioMap; const a = await postJSON(API.prioridad, { estatus: 1 }); const m = {}; (a || []).forEach(p => m[p.id] = p.nombre); m._ts = Date.now(); return S.prioMap = m }
  async function getCMap() { if (S.catMap && Date.now() - S.catMap._ts < 18e5) return S.catMap; const a = await postJSON(API.categorias, { estatus: 1 }); const m = {}; (a || []).forEach(c => m[c.id] = c.nombre); m._ts = Date.now(); return S.catMap = m }
  async function getCalMap() { if (S.calMap && Date.now() - S.calMap._ts < 18e5) return S.calMap; const a = await postJSON(API.calendario, { estatus: 1 }); const m = {}; (a || []).forEach(c => m[c.id] = c.nombre); m._ts = Date.now(); return S.calMap = m }
  async function getTipoMap() { if (S.tipoMap && Date.now() - S.tipoMap._ts < 18e5) return S.tipoMap; const a = await postJSON(API.tipoEval, { estatus: 1 }); const m = {}; (a || []).forEach(c => m[c.id] = c.nombre); m._ts = Date.now(); return S.tipoMap = m }
  async function getActMap() { if (S.actMap && Date.now() - S.actMap._ts < 18e5) return S.actMap; const a = await postJSON(API.actividades, { estatus: 1 }); const m = {}; (a || []).forEach(c => m[c.id] = c.nombre); m._ts = Date.now(); return S.actMap = m }
  const mapOpts = (map, sel) => { if (!map || typeof map !== "object") return '<option value="">—</option>'; return Object.keys(map).filter(k => k !== "_ts").map(id => `<option value="${escA(id)}"${String(sel) === String(id) ? " selected" : ""}>${esc(map[id])}</option>`).join("") };

  // -------- ROUTER
  function setRoute(h) { const t = h || (IS_ADMIN ? "#/cursos" : "#/cuentas"); if (location.hash !== t) location.hash = t; else onRouteChange() }
  W.addEventListener("hashchange", onRouteChange);
  function onRouteChange() { enforceGuard(); const h = location.hash || (IS_ADMIN ? "#/cursos" : "#/cuentas"); S.route = h; S.page = 1; qsa(".gc-side .nav-item").forEach(a => { const act = a.getAttribute("href") === h; a.classList && a.classList.toggle("is-active", act); a.setAttribute("aria-current", act ? "page" : "false") }); if (h.indexOf("#/cursos") === 0) { hideCuenta(); return IS_ADMIN ? loadCursos() : enforceGuard() } if (h.indexOf("#/noticias") === 0) { hideCuenta(); return IS_ADMIN ? loadNoticias() : enforceGuard() } if (h.indexOf("#/tutores") === 0) { hideCuenta(); return IS_ADMIN ? loadTutores() : enforceGuard() } if (h.indexOf("#/suscripciones") === 0) { hideCuenta(); return drawSubs() } if (h.indexOf("#/cuentas") === 0) { showCuenta(); return } setRoute(IS_ADMIN ? "#/cursos" : "#/cuentas") }
  function refreshCurrent() { if (S.route.indexOf("#/cursos") === 0) return drawCursos(); if (S.route.indexOf("#/noticias") === 0) return drawNoticias(); if (S.route.indexOf("#/tutores") === 0) return drawTutores(); if (S.route.indexOf("#/cuentas") === 0) return drawCuenta() }

  // -------- CUENTA 
  function showCuenta() { try { qs(".recursos-box.desktop-only").style.display = "none" } catch { } try { qs(".recursos-box.mobile-only").style.display = "none" } catch { } try { qs("#pagination-controls").style.display = "none" } catch { } try { qs("#pagination-mobile").style.display = "none" } catch { } if (!qs("#cuenta-panel")) { const host = qs(".main-content") || D.body, p = D.createElement("div"); p.id = "cuenta-panel"; p.style.padding = "16px 18px"; p.innerHTML = W.renderCuentaOpciones ? W.renderCuentaOpciones() : "<div>Panel de cuenta</div>"; host.appendChild(p) } }
  function hideCuenta() { const p = qs("#cuenta-panel"); p && p.remove();[".recursos-box.desktop-only", ".recursos-box.mobile-only", "#pagination-controls", "#pagination-mobile"].forEach(sel => { const el = qs(sel); if (!el) return; el.style.display = "" }) }
  function drawCuenta() {/* no-op, panel ya montado */ }

  // ===================== CURSOS =======================
  function badgePrecio(n) { return Number(n) === 0 ? '<span class="gc-chip gray">Gratuito</span>' : '<span class="gc-chip gray">Con costo</span>' }
  function badgeCurso(e) { return Number(e) === 1 ? '<span class="gc-badge-activo">Activo</span>' : '<span class="gc-badge-inactivo">Inactivo</span>' }
  function textCurso(e) { return Number(e) === 1 ? "Activo" : "Inactivo" }
  async function loadCursos() {
    qs("#mod-title") && (qs("#mod-title").textContent = "Cursos"); const hdr = qs(".recursos-box.desktop-only .table-header"); if (hdr) { const c1 = hdr.querySelector(".col-nombre"), c2 = hdr.querySelector(".col-tutor") || hdr.querySelector(".col-tipo"), c3 = hdr.querySelector(".col-fecha"), c4 = hdr.querySelector(".col-status"); c1 && (c1.textContent = "Nombre"); c2 && (c2.textContent = "Tutor", c2.classList.add("col-tutor")); c3 && (c3.textContent = "Fecha de inicio"); c4 ? (c4.textContent = "Status") : (() => { const d = D.createElement("div"); d.className = "col-status"; d.setAttribute("role", "columnheader"); d.textContent = "Status"; hdr.appendChild(d) })() }
    qs(".tt-title") && (qs(".tt-title").textContent = "Cursos:"); qs("#tt-status") && (qs("#tt-status").textContent = "Activos e Inactivos", qs("#tt-status").classList.remove("badge-inactivo"), qs("#tt-status").classList.add("badge-activo")); skeleton();
    try { const [act, inact, tmap, pmap, cmap, calmap, temap, amap] = await Promise.all([postJSON(API.cursos, { estatus: 1 }), postJSON(API.cursos, { estatus: 0 }), getTMap(), getPMap(), getCMap(), getCalMap(), getTipoMap(), getActMap()]); const raw = [].concat(Array.isArray(act) ? act : [], Array.isArray(inact) ? inact : []); S.raw = raw; S.data = raw.map(c => ({ id: c.id, nombre: c.nombre, tutor: (tmap && tmap[c.tutor]) || ("Tutor #" + c.tutor), tutor_id: c.tutor, prioridad_id: c.prioridad, prioridad_nombre: (pmap && pmap[c.prioridad]) || ("#" + c.prioridad), categoria_id: c.categoria, categoria_nombre: (cmap && cmap[c.categoria]) || ("#" + c.categoria), calendario_id: c.calendario, calendario_nombre: (calmap && calmap[c.calendario]) || ("#" + c.calendario), tipo_eval_id: c.tipo_evaluacion, tipo_eval_nombre: (temap && temap[c.tipo_evaluacion]) || ("#" + c.tipo_evaluacion), actividades_id: c.actividades, actividades_nombre: (amap && amap[c.actividades]) || ("#" + c.actividades), precio: c.precio, certificado: !!c.certificado, fecha: c.fecha_inicio, estatus: Number(c.estatus), _all: c })); drawCursos() } catch (e) { qs("#recursos-list") && (qs("#recursos-list").innerHTML = '<div style="padding:1rem;color:#b00020;">Error al cargar cursos</div>'); qs("#recursos-list-mobile") && (qs("#recursos-list-mobile").innerHTML = ""); T("No se pudieron cargar cursos", "error") }
  }
  function drawCursos() { const rows = S.data; renderList(rows, { desktopRow: it => `<div class="table-row" data-id="${it.id}" data-type="curso"><div class="col-nombre"><span class="name-text">${esc(it.nombre)}</span> ${badgePrecio(it.precio)}</div><div class="col-tutor">${esc(it.tutor)}</div><div class="col-fecha">${fmtDate(it.fecha)}</div><div class="col-status">${badgeCurso(it.estatus)}</div></div>`, mobileRow: it => `<div class="table-row-mobile" data-id="${it.id}" data-type="curso"><button class="row-toggle"><div class="col-nombre">${esc(it.nombre)} ${badgePrecio(it.precio)}</div><span class="icon-chevron">›</span></button><div class="row-details"><div><strong>Tutor:</strong> ${esc(it.tutor)}</div><div><strong>Inicio:</strong> ${fmtDate(it.fecha)}</div><div><strong>Status:</strong> ${textCurso(it.estatus)}</div><div style="display:flex;gap:8px;margin:.25rem 0 .5rem;"><button class="gc-btn gc-btn--ghost open-drawer">Ver detalle</button>${Number(it.estatus) === 0 ? `<button class="gc-btn gc-btn--success gc-reactivate" data-type="curso" data-id="${it.id}">Reactivar</button>` : ""}</div></div></div>`, drawerTitle: d => { const it = S.data.find(x => String(x.id) === d.id); return it ? ("Curso · " + it.nombre) : "Curso" }, drawerBody: d => renderCursoDrawer(d) }) }
  const normCurso = p => ({ ...p, nombre: String(p.nombre || ""), descripcion_breve: String(p.descripcion_breve || ""), descripcion_curso: String(p.descripcion_curso || ""), descripcion_media: String(p.descripcion_media || ""), dirigido: String(p.dirigido || ""), competencias: String(p.competencias || ""), certificado: Number(!!p.certificado), tutor: Number(p.tutor || 0), horas: Number(p.horas || 0), precio: Number(p.precio || 0), estatus: Number(p.estatus != null ? p.estatus : 1), prioridad: Number(p.prioridad || 1), categoria: Number(p.categoria || 1), calendario: Number(p.calendario || 1), tipo_evaluacion: Number(p.tipo_evaluacion || 1), actividades: Number(p.actividades || 1), creado_por: Number(p.creado_por || 0), fecha_inicio: String(p.fecha_inicio || "") });
  function getEmptyCourse() { return { nombre: "", descripcion_breve: "", descripcion_curso: "", descripcion_media: "", dirigido: "", competencias: "", certificado: 0, tutor: "", horas: 0, precio: 0, estatus: 1, fecha_inicio: "", prioridad: 1, categoria: 1, calendario: 1, tipo_evaluacion: 1, actividades: 1, creado_por: Number((CUR_USER && CUR_USER.id) || 0) || 1 } }
  function readCursoForm(id) { const v = id != null ? { id: Number(id) } : {}; const val = s => { const el = qs("#" + s); return el ? el.value : "" }, valN = (s, d) => Number(val(s) || d || 0), valC = s => (qs("#" + s) && qs("#" + s).checked) ? 1 : 0; return { ...v, nombre: val("f_nombre"), descripcion_breve: val("f_desc_breve"), descripcion_curso: val("f_desc_curso"), descripcion_media: val("f_desc_media"), dirigido: val("f_dirigido"), competencias: val("f_competencias"), certificado: valC("f_certificado"), tutor: valN("f_tutor", 0), horas: valN("f_horas", 0), precio: valN("f_precio", 0), estatus: 1, fecha_inicio: val("f_fecha"), prioridad: valN("f_prioridad", 1), categoria: valN("f_categoria", 1), calendario: valN("f_calendario", 1), tipo_evaluacion: valN("f_tipo_eval", 1), actividades: valN("f_actividades", 1), creado_por: Number((CUR_USER && CUR_USER.id) || 0) || 1 } }
  async function uploadCursoImagen(id, file) { if (!UPLOAD.cursoImg) throw Error("UPLOAD.cursoImg no configurado"); const v = validarImagen(file, { maxMB: 2 }); if (!v.ok) throw Error(v.error); const fd = new FormData(); fd.append("curso_id", String(id)); fd.append("imagen", file); const r = await fetch(UPLOAD.cursoImg, { method: "POST", body: fd }); const txt = await r.text().catch(() => ""); if (!r.ok) throw Error("HTTP " + r.status + " " + (txt || "")); try { return JSON.parse(txt) } catch { return { _raw: txt } } }
  function disableInputs(dis) { qsa("#drawer-body input,#drawer-body select,#drawer-body textarea").forEach(el => el.disabled = !!dis) }
  function jsonSec(o, t, id, btn) { const safe = esc(JSON.stringify(o || {}, null, 2)); return `<details class="dev-json" open style="margin-top:16px;"><summary style="cursor:pointer;font-weight:600;">${esc(t)}</summary><div style="display:flex;gap:.5rem;margin:.5rem 0;"><button class="gc-btn" id="${btn}">Copiar JSON</button></div><pre id="${id}" class="value" style="white-space:pre-wrap;max-height:260px;overflow:auto;">${safe}</pre></details>` }
  function bindCopy(preSel, btnSel) { const b = qs(btnSel), p = qs(preSel); if (!b || !p) return; b.addEventListener("click", async e => { e.preventDefault(); const txt = p.textContent || ""; if (!txt) return T("No hay JSON", "warning"); try { await (navigator.clipboard && navigator.clipboard.writeText ? navigator.clipboard.writeText(txt) : Promise.reject()); T("JSON copiado", "exito") } catch { try { const ta = D.createElement("textarea"); ta.value = txt; ta.style.position = "fixed"; ta.style.left = "-9999px"; D.body.appendChild(ta); ta.select(); D.execCommand("copy"); D.body.removeChild(ta); T("JSON copiado", "exito") } catch { alert("No se pudo copiar") } } }) }
  function renderCursoDrawer(d) {
    const it = S.data.find(x => String(x.id) === d.id), mode = (S.drawer && S.drawer.mode) || (it ? "view" : "create"), isCreate = mode === "create" || !it, isEdit = mode === "edit", c = isCreate ? getEmptyCourse() : (it ? it._all : null); if (!c) return "<p>No encontrado.</p>"; const sel = (id, opts) => `<select id="${id}">${opts}</select>`, inT = (id, v, ph) => `<input id="${id}" type="text" value="${escA(v || "")}" placeholder="${escA(ph || "")}">`, inN = (id, v, min) => `<input id="${id}" type="number" value="${escA(v != null ? v : "")}" min="${min || "0"}">`, inD = (id, v) => `<input id="${id}" type="date" value="${escA(v || "")}">`, inC = (id, v) => `<label class="gc-inline"><input id="${id}" type="checkbox" ${Number(v) ? "checked" : ""}/> <span>Sí</span></label>`, inTA = (id, v, rows) => `<textarea id="${id}" rows="${rows || 4}">${esc(v || "")}</textarea>`;
    const tutorOpt = mapOpts(S.tutorsMap, String(c.tutor || "")), prioOpt = mapOpts(S.prioMap, String(c.prioridad || "")), catOpt = mapOpts(S.catMap, String(c.categoria || "")), calOpt = mapOpts(S.calMap, String(c.calendario || "")), tipoOpt = mapOpts(S.tipoMap, String(c.tipo_evaluacion || "")), actOpt = mapOpts(S.actMap, String(c.actividades || ""));
    const field = (l, val, inp) => `<div class="field"><div class="label">${esc(l)}</div><div class="value">${(isEdit || isCreate) ? inp : esc(val != null ? val : "-")}</div></div>`;
    let html = `${isCreate ? '<div class="gc-actions"><button class="gc-btn gc-btn--ghost" id="btn-cancel">Cancelar</button><button class="gc-btn gc-btn--primary" id="btn-save">Guardar</button></div>' : IS_ADMIN ? `<div class="gc-actions">${mode === "view" ? '<button class="gc-btn" id="btn-edit">Editar</button>' : ""}${isEdit ? '<button class="gc-btn gc-btn--ghost" id="btn-cancel">Cancelar</button>' : ""}${isEdit ? '<button class="gc-btn gc-btn--primary" id="btn-save">Guardar</button>' : ""}<button class="gc-btn gc-btn--danger" id="btn-delete" data-step="1">Eliminar</button>${Number(c.estatus) === 0 ? '<button class="gc-btn gc-btn--success" id="btn-reactivar">Reactivar</button>' : ""}</div>` : ""}`;
    html += field("Nombre", c.nombre, inT("f_nombre", c.nombre, "Nombre del curso")) + field("Descripción breve", c.descripcion_breve, inTA("f_desc_breve", c.descripcion_breve, 3)) + field("Descripción media", c.descripcion_media, inTA("f_desc_media", c.descripcion_media, 4)) + field("Descripción del curso", c.descripcion_curso, inTA("f_desc_curso", c.descripcion_curso, 6)) + field("Dirigido a", c.dirigido, inTA("f_dirigido", c.dirigido, 3)) + field("Competencias", c.competencias, inTA("f_competencias", c.competencias, 3)) + `<div class="grid-3">` + field("Tutor", (S.tutorsMap && S.tutorsMap[c.tutor]) || c.tutor, sel("f_tutor", tutorOpt)) + field("Categoría", (S.catMap && S.catMap[c.categoria]) || c.categoria, sel("f_categoria", catOpt)) + field("Prioridad", (S.prioMap && S.prioMap[c.prioridad]) || c.prioridad, sel("f_prioridad", prioOpt)) + `</div><div class="grid-3">` + field("Tipo de evaluación", (S.tipoMap && S.tipoMap[c.tipo_evaluacion]) || c.tipo_evaluacion, sel("f_tipo_eval", tipoOpt)) + field("Actividades", (S.actMap && S.actMap[c.actividades]) || c.actividades, sel("f_actividades", actOpt)) + field("Calendario", (S.calMap && S.calMap[c.calendario]) || c.calendario, sel("f_calendario", calOpt)) + `</div><div class="grid-3">` + field("Horas", c.horas, inN("f_horas", c.horas || 0)) + field("Precio", c.precio === 0 ? "Gratuito" : fmtMoney(c.precio), inN("f_precio", c.precio || 0)) + field("Certificado", Number(c.certificado) ? "Sí" : "No", inC("f_certificado", c.certificado)) + `</div>` + field("Fecha de inicio", c.fecha_inicio, inD("f_fecha", c.fecha_inicio));
    if (isCreate) { html += `<div class="field"><div class="label">Imagen del curso</div><div class="value"><input id="f_curso_img_new" type="file" accept="image/png,image/jpeg"><div class="media-help" style="color:#666;margin-top:.25rem;">JPG/PNG · Máx 2MB</div></div></div>` } else { html += `<div class="field"><div class="label">Imágenes existentes</div><div class="value"><div id="media-curso" data-id="${c.id || (it ? it.id : "")}"></div></div></div>` }
    IS_ADMIN && (html += jsonSec(c, "JSON · Curso", "json-curso", "btn-copy-json-curso"));
    qs("#drawer-title") && (qs("#drawer-title").textContent = isCreate ? "Curso · Crear" : ("Curso · " + (it ? it.nombre : ""))); S.drawer = { type: "curso", id: it ? it.id : null, mode: isCreate ? "create" : isEdit ? "edit" : "view" };
    setTimeout(() => {
      try {
        disableInputs(!(isEdit || isCreate));
        const addImg = qs("#f_curso_img_new"); addImg && addImg.addEventListener("change", () => { const f = addImg.files && addImg.files[0]; if (!f) return; const v = validarImagen(f, { maxMB: 2 }); if (!v.ok) return T(v.error, "error"); S.tmpNewCourseImage = f; T("Imagen seleccionada (se subirá al guardar)", "exito") });
        qs("#btn-save") && qs("#btn-save").addEventListener("click", async e => { e.stopPropagation(); try { if (isCreate) await saveNewCurso(); else await saveUpdateCurso(it) } catch (err) { T("Error al guardar", "error") } });
        qs("#btn-edit") && qs("#btn-edit").addEventListener("click", () => { S.drawer = { type: "curso", id: it ? it.id : null, mode: "edit" }; qs("#drawer-body").innerHTML = renderCursoDrawer({ id: String(it ? it.id : "") }) });
        qs("#btn-cancel") && qs("#btn-cancel").addEventListener("click", () => { if (isCreate) { S.tmpNewCourseImage = null; closeDrawer() } else { S.drawer = { type: "curso", id: it ? it.id : null, mode: "view" }; qs("#drawer-body").innerHTML = renderCursoDrawer({ id: String(it ? it.id : "") }) } });
        qs("#btn-delete") && qs("#btn-delete").addEventListener("click", async e => { e.stopPropagation(); const b = e.currentTarget, step = b.getAttribute("data-step") || "1"; if (step === "1") { b.textContent = "Confirmar"; b.setAttribute("data-step", "2"); setTimeout(() => { if (b.getAttribute("data-step") === "2") { b.textContent = "Eliminar"; b.setAttribute("data-step", "1") } }, 3500); return } try { await softDeleteCurso(it); T("Curso eliminado (inactivo)", "exito"); closeDrawer(); await loadCursos() } catch { T("No se pudo eliminar", "error") } });
        qs("#btn-reactivar") && qs("#btn-reactivar").addEventListener("click", async () => { try { await reactivateCurso(Number(it && it.id)); T("Curso reactivado", "exito"); await loadCursos(); const re = S.data.find(x => x.id === (it && it.id)); re && openDrawer("Curso · " + re.nombre, renderCursoDrawer({ id: String(re.id) })) } catch { T("No se pudo reactivar", "error") } });
        const cont = qs("#media-curso"); if (cont) { const cid = Number(c.id || (it ? it.id : 0)); const urls = mediaUrlsByType("curso", cid); const g = D.createElement("div"); g.className = "media-grid"; urls.forEach(u => { const card = D.createElement("div"); card.className = "media-card"; card.innerHTML = '<figure class="media-thumb"><img alt="Portada" src="' + withBust(u) + '"></figure><div class="media-meta"><div class="media-label">Portada</div></div>'; const img = card.querySelector("img"); img.onerror = () => { img.onerror = null; img.src = noImg() }; g.appendChild(card) }); cont.innerHTML = '<div class="media-head"><div class="media-title">Imágenes</div><div class="media-help" style="color:#888;">Solo lectura</div></div>'; cont.appendChild(g) }
        IS_ADMIN && bindCopy("#json-curso", "#btn-copy-json-curso")
      } catch (e) { T("Error al preparar formulario", "error") }
    }, 0);
    return html
  }
  async function saveNewCurso() { const p = normCurso(readCursoForm(null)); if (!p.nombre) return T("Falta el nombre", "warning"); if (!p.tutor) return T("Selecciona tutor", "warning"); if (!p.categoria) return T("Selecciona categoría", "warning"); if (!p.fecha_inicio) return T("Fecha de inicio requerida", "warning"); const res = await postJSON(API.iCursos, p); const newId = Number((res && (res.id || res.curso_id || res.insert_id || (res.data && res.data.id))) || 0); const f = S.tmpNewCourseImage; S.tmpNewCourseImage = null; if (newId && f) { try { await uploadCursoImagen(newId, f); T("Imagen subida", "exito") } catch { T("Curso creado, imagen falló", "error") } } T("Curso creado", "exito"); closeDrawer(); await loadCursos(); const re = S.data.find(x => x.id === newId); re && openDrawer("Curso · " + re.nombre, renderCursoDrawer({ id: String(re.id) })) }
  async function saveUpdateCurso(it) { if (!it || !it._all) return T("Sin item", "error"); const body = normCurso(readCursoForm(it.id)); await postJSON(API.uCursos, body); T("Cambios guardados", "exito"); await loadCursos(); const re = S.data.find(x => x.id === it.id); re && openDrawer("Curso · " + re.nombre, renderCursoDrawer({ id: String(re.id) })) }
  async function softDeleteCurso(it) { if (!it || !it._all) throw Error("Item inválido"); const payload = normCurso({ ...it._all, estatus: 0 }); await postJSON(API.uCursos, payload) }
  async function reactivateCurso(id) { const it = S.data.find(x => x.id === Number(id)); if (!it || !it._all) throw Error("No encontrado"); await postJSON(API.uCursos, normCurso({ ...it._all, estatus: 1 })) }
  async function openCreateCurso() { if (!IS_ADMIN) return; await Promise.all([getTMap(), getPMap(), getCMap(), getCalMap(), getTipoMap(), getActMap()]); S.drawer = { type: "curso", id: null, mode: "create" }; openDrawer("Curso · Crear", renderCursoDrawer({ id: "" })) }

  // ==================== NOTICIAS ======================
  function badgeNoticia(e) { return Number(e) === 1 ? '<span class="gc-badge-activo">Publicada</span>' : '<span class="gc-badge-inactivo">Inactiva</span>' }
  async function getCommentsCount(id) { const r = await postJSON(API.comentarios, { noticia_id: Number(id), estatus: 1 }); const a = Array.isArray(r) ? r : []; let t = 0; for (let i = 0; i < a.length; i++) { const c = a[i]; t += 1; if (c && Array.isArray(c.respuestas)) t += c.respuestas.length } return t }
  async function loadNoticias() {
    qs("#mod-title") && (qs("#mod-title").textContent = "Noticias"); const hdr = qs(".recursos-box.desktop-only .table-header"); if (hdr) { hdr.querySelector(".col-nombre") && (hdr.querySelector(".col-nombre").textContent = "Título"); const c2 = hdr.querySelector(".col-tutor") || hdr.querySelector(".col-tipo"); c2 && (c2.textContent = "Comentarios", c2.classList.add("col-tipo")); hdr.querySelector(".col-fecha") && (hdr.querySelector(".col-fecha").textContent = "Fecha de publicación"); hdr.querySelector(".col-status") && (hdr.querySelector(".col-status").textContent = "Status") }
    qs(".tt-title") && (qs(".tt-title").textContent = "Noticias:"); qs("#tt-status") && (qs("#tt-status").textContent = "Publicadas e Inactivas", qs("#tt-status").classList.remove("badge-inactivo"), qs("#tt-status").classList.add("badge-activo")); skeleton();
    try { const [act, inact] = await Promise.all([postJSON(API.noticias, { estatus: 1 }), postJSON(API.noticias, { estatus: 0 })]); const arr = [].concat(Array.isArray(act) ? act : [], Array.isArray(inact) ? inact : []); const counts = await Promise.all(arr.map(n => getCommentsCount(n.id).catch(() => 0))); S.raw = arr; S.data = arr.map((n, i) => ({ id: n.id, titulo: n.titulo, fecha: n.fecha_creacion, estatus: Number(n.estatus), comentarios: counts[i] || 0, _all: n })); drawNoticias() } catch (e) { qs("#recursos-list") && (qs("#recursos-list").innerHTML = '<div style="padding:1rem;color:#b00020;">Error al cargar noticias</div>'); T("No se pudieron cargar noticias", "error") }
  }
  function drawNoticias() { renderList(S.data, { desktopRow: it => `<div class="table-row" data-id="${it.id}" data-type="noticia"><div class="col-nombre"><span class="name-text">${esc(it.titulo)}</span></div><div class="col-tutor">${it.comentarios}</div><div class="col-fecha">${fmtDT(it.fecha)}</div><div class="col-status">${badgeNoticia(it.estatus)}</div></div>`, mobileRow: it => `<div class="table-row-mobile" data-id="${it.id}" data-type="noticia"><button class="row-toggle"><div class="col-nombre">${esc(it.titulo)}</div><span class="icon-chevron">›</span></button><div class="row-details"><div><strong>Comentarios:</strong> ${it.comentarios}</div><div><strong>Publicada:</strong> ${fmtDT(it.fecha)}</div><div style="display:flex;gap:8px;margin:.25rem 0 .5rem;"><button class="gc-btn gc-btn--ghost open-drawer">Ver detalle</button>${Number(it.estatus) === 0 ? `<button class="gc-btn gc-btn--success gc-reactivate" data-type="noticia" data-id="${it.id}">Reactivar</button>` : ""}</div></div></div>`, drawerTitle: d => { const it = S.data.find(x => String(x.id) === d.id); return it ? ("Noticia · " + it.titulo) : "Noticia" }, drawerBody: d => renderNoticiaDrawer(d) }) }
  async function inactivateNoticia(id) { const it = S.data.find(x => x.id === Number(id)); if (!it || !it._all) throw Error("Noticia no encontrada"); await postJSON(API.uNoticias, { ...it._all, estatus: 0 }) }
  async function reactivateNoticia(id) { const it = S.data.find(x => x.id === Number(id)); if (!it || !it._all) { T("Falta endpoint u_noticia o item", "warning"); return !1 } await postJSON(API.uNoticias, { ...it._all, estatus: 1 }); return !0 }
  function renderNoticiaDrawer(d) {
    const it = S.data.find(x => String(x.id) === d.id), n = it && it._all; if (!n) return "<p>No encontrado.</p>"; const mode = (S.drawer && S.drawer.type === "noticia" && S.drawer.id === n.id) ? S.drawer.mode : "view", isEdit = mode === "edit", isInactive = Number(n.estatus) === 0; const actions = IS_ADMIN ? `<div class="gc-actions">${!isEdit ? '<button class="gc-btn" id="n_edit">Editar</button>' : ""}${isEdit ? '<button class="gc-btn gc-btn--ghost" id="n_cancel">Cancelar</button><button class="gc-btn gc-btn--primary" id="n_save">Guardar</button>' : ""}${isInactive ? '<button class="gc-btn gc-btn--success" id="n_rea">Reactivar</button>' : '<button class="gc-btn gc-btn--danger" id="n_del" data-step="1">Eliminar</button>'}</div>` : ""; let html = actions + pair("Título", n.titulo) + pair("Estado", Number(n.estatus) === 1 ? "Publicada" : "Inactiva") + pair("Fecha publicación", fmtDT(n.fecha_creacion)) + pair("Descripción (1)", n.desc_uno) + pair("Descripción (2)", n.desc_dos) + pair("Creado por", n.creado_por) + `<div class="field"><div class="label">Imágenes</div><div class="value"><div id="media-noticia" data-id="${n.id}"></div></div></div>`; IS_ADMIN && (html += jsonSec(n, "JSON · Noticia", "json-noticia", "btn-copy-json-noticia"));
    qs("#drawer-title") && (qs("#drawer-title").textContent = "Noticia · " + (it ? it.titulo : "")); S.drawer = { type: "noticia", id: n.id, mode: isEdit ? "edit" : "view" };
    setTimeout(() => {
      const cont = qs("#media-noticia"); if (cont) { const g = D.createElement("div"); g.className = "media-grid"; mediaUrlsByType("noticia", n.id).forEach((u, i) => { const card = D.createElement("div"); card.className = "media-card"; card.innerHTML = '<figure class="media-thumb"><img alt="Imagen ' + (i + 1) + '" src="' + withBust(u) + '"></figure><div class="media-meta"><div class="media-label">Imagen ' + (i + 1) + '</div></div>'; const img = card.querySelector("img"); img.onerror = () => { img.onerror = null; img.src = noImg() }; g.appendChild(card) }); cont.innerHTML = '<div class="media-head"><div class="media-title">Imágenes</div><div class="media-help" style="color:#888;">Solo lectura</div></div>'; cont.appendChild(g) }
      qs("#n_edit") && qs("#n_edit").addEventListener("click", () => { S.drawer = { type: "noticia", id: n.id, mode: "edit" }; qs("#drawer-body").innerHTML = renderNoticiaDrawer({ id: String(n.id) }) });
      qs("#n_cancel") && qs("#n_cancel").addEventListener("click", () => { S.drawer = { type: "noticia", id: n.id, mode: "view" }; qs("#drawer-body").innerHTML = renderNoticiaDrawer({ id: String(n.id) }) });
      qs("#n_save") && qs("#n_save").addEventListener("click", async () => { T("Cambios guardados", "exito"); S.drawer = { type: "noticia", id: n.id, mode: "view" }; await loadNoticias(); const re = S.data.find(x => x.id === n.id); re && openDrawer("Noticia · " + re.titulo, renderNoticiaDrawer({ id: String(re.id) })) });
      qs("#n_del") && qs("#n_del").addEventListener("click", async e => { const b = e.currentTarget, step = b.getAttribute("data-step") || "1"; if (step === "1") { b.textContent = "Confirmar"; b.setAttribute("data-step", "2"); setTimeout(() => { if (b.getAttribute("data-step") === "2") { b.textContent = "Eliminar"; b.setAttribute("data-step", "1") } }, 3500); return } try { await inactivateNoticia(n.id); T("Noticia eliminada (inactiva)", "exito"); closeDrawer(); await loadNoticias() } catch { T("No se pudo eliminar", "error") } });
      qs("#n_rea") && qs("#n_rea").addEventListener("click", async () => { const ok = await reactivateNoticia(n.id); if (ok) { T("Noticia reactivada", "exito"); await loadNoticias(); const re = S.data.find(x => x.id === n.id); re && openDrawer("Noticia · " + re.titulo, renderNoticiaDrawer({ id: String(re.id) })) } });
      IS_ADMIN && bindCopy("#json-noticia", "#btn-copy-json-noticia")
    }, 0); return html
  }

  // ===================== TUTORES ======================
  function badgeTutor(s) { s = String(s).toLowerCase(); if (s === "1" || s === "activo") return '<span class="gc-badge-activo">Activo</span>'; if (s === "0" || s === "inactivo") return '<span class="gc-badge-inactivo">Inactivo</span>'; return '<span class="gc-chip gray">Pausado</span>' }
  async function loadTutores() {
    qs("#mod-title") && (qs("#mod-title").textContent = "Tutores"); const hdr = qs(".recursos-box.desktop-only .table-header"); if (hdr) { hdr.querySelector(".col-nombre") && (hdr.querySelector(".col-nombre").textContent = "Nombre"); const c = hdr.querySelector(".col-tutor") || hdr.querySelector(".col-tipo"); c && (c.textContent = "Correo", c.classList.add("col-tipo")); hdr.querySelector(".col-fecha") && (hdr.querySelector(".col-fecha").textContent = "Teléfono"); hdr.querySelector(".col-status") && (hdr.querySelector(".col-status").textContent = "Status") }
    skeleton(); try { const res = await postJSON(API.tutores, { estatus: -1 }); const arr = Array.isArray(res) ? res : (res.data || []); S.tutores = arr.map(t => ({ id: t.id, nombre: t.nombre || t.name, correo: t.correo || t.email, telefono: t.telefono || t.phone, estatus: (t.estatus != null ? t.estatus : t.status) || 1, descripcion: t.descripcion || t.bio || "", cursos: t.cursos || [], foto: t.foto || t.avatar || "", _all: t })); drawTutores() } catch (e) { qs("#recursos-list") && (qs("#recursos-list").innerHTML = '<div style="padding:1rem;color:#b00020;">Error al cargar tutores</div>'); T("No se pudieron cargar tutores", "error") }
  }
  function drawTutores() { const R = S.tutores; renderList(R, { desktopRow: it => `<div class="table-row" data-id="${it.id}" data-type="tutor"><div class="col-nombre"><span class="name-text">${esc(it.nombre)}</span></div><div class="col-tutor"><a href="mailto:${escA(it.correo)}">${esc(it.correo)}</a></div><div class="col-fecha">${esc(it.telefono || "-")}</div><div class="col-status">${badgeTutor(it.estatus)}</div></div>`, mobileRow: it => `<div class="table-row-mobile" data-id="${it.id}" data-type="tutor"><button class="row-toggle"><div class="col-nombre">${esc(it.nombre)}</div><span class="icon-chevron">›</span></button><div class="row-details"><div><strong>Correo:</strong> <a href="mailto:${escA(it.correo)}">${esc(it.correo)}</a></div><div><strong>Teléfono:</strong> ${esc(it.telefono || "-")}</div><div><strong>Status:</strong> ${esc(String(it.estatus))}</div><div style="margin:.4rem 0;"><button class="gc-btn gc-btn--ghost open-drawer">Ver detalle</button></div></div></div>`, drawerTitle: d => { const it = S.tutores.find(x => String(x.id) === d.id); return it ? ("Tutor · " + it.nombre) : "Tutor" }, drawerBody: d => renderTutorDrawer(d) }) }
  function renderTutorDrawer(d) {
    const it = S.tutores.find(x => String(x.id) === d.id), mode = (S.drawer && S.drawer.mode) || (it ? "view" : "create"), isCreate = mode === "create" || !it, isEdit = mode === "edit", t = isCreate ? { id: null, nombre: "", correo: "", telefono: "", estatus: 1, descripcion: "", cursos: [], foto: "" } : it;
    const field = (l, v, i) => `<div class="field"><div class="label">${esc(l)}</div><div class="value">${(isEdit || isCreate) ? i : esc(v != null ? v : "-")}</div></div>`;
    let html = `<div class="gc-actions">${(!isCreate && !isEdit) ? '<button class="gc-btn" id="t_edit">Editar</button>' : ""}${!isCreate ? '<button class="gc-btn gc-btn--danger" id="t_del" data-step="1">Eliminar</button>' : ""}${(isEdit || isCreate) ? '<button class="gc-btn gc-btn--ghost" id="t_cancel">Cancelar</button><button class="gc-btn gc-btn--primary" id="t_save">Guardar</button>' : ""}</div>`;
    html += field("Status", t.estatus, `<select id="t_estatus"><option value="1"${Number(t.estatus) === 1 ? " selected" : ""}>Activo</option><option value="0"${Number(t.estatus) === 0 ? " selected" : ""}>Inactivo</option><option value="2"${String(t.estatus) === "2" ? " selected" : ""}>Pausado</option></select>`) + field("Nombre", t.nombre, `<input id="t_nombre" type="text" value="${escA(t.nombre)}">`) + field("Correo", t.correo, `<input id="t_correo" type="email" value="${escA(t.correo)}">`) + field("Teléfono", t.telefono, `<input id="t_tel" type="tel" value="${escA(t.telefono)}">`) + field("Descripción", t.descripcion, `<textarea id="t_desc" rows="3">${esc(t.descripcion)}</textarea>`) + `<div class="field"><div class="label">Cursos</div><div class="value">${t.cursos && t.cursos.length ? t.cursos.map(c => `<div class="gc-chip gray">${esc(c)}</div>`).join(" ") : "-"}</div></div>` + `<div class="field"><div class="label">Fotografía</div><div class="value"><img id="t_foto" src="${t.foto || noImg()}" alt="Foto" style="width:120px;height:120px;object-fit:cover;border-radius:10px;border:1px solid #eee;display:block;margin-bottom:6px;"><${(isEdit || isCreate) ? 'input id="t_foto_inp" type="file" accept="image/png,image/jpeg"' : ''} ><div class="media-help" style="color:#666;">JPG/PNG · Máx 2MB</div></div></div>`;
    qs("#drawer-title") && (qs("#drawer-title").textContent = isCreate ? "Tutor · Crear" : "Tutor · " + (it ? it.nombre : "")); S.drawer = { type: "tutor", id: it ? it.id : null, mode: isCreate ? "create" : isEdit ? "edit" : "view" };
    setTimeout(() => {
      const dis = !(isEdit || isCreate); qsa("#drawer-body input,#drawer-body select,#drawer-body textarea").forEach(el => el.disabled = !!dis);
      qs("#t_edit") && qs("#t_edit").addEventListener("click", () => { S.drawer = { type: "tutor", id: it ? it.id : null, mode: "edit" }; qs("#drawer-body").innerHTML = renderTutorDrawer({ id: String(it ? it.id : "") }) });
      qs("#t_cancel") && qs("#t_cancel").addEventListener("click", () => { if (isCreate) closeDrawer(); else { S.drawer = { type: "tutor", id: it ? it.id : null, mode: "view" }; qs("#drawer-body").innerHTML = renderTutorDrawer({ id: String(it ? it.id : "") }) } });
      qs("#t_save") && qs("#t_save").addEventListener("click", async () => { const p = { id: it && it.id, nombre: qs("#t_nombre")?.value.trim(), correo: qs("#t_correo")?.value.trim(), telefono: qs("#t_tel")?.value.trim(), estatus: Number(qs("#t_estatus")?.value || 1), descripcion: qs("#t_desc")?.value || "" }; if (!p.nombre) return T("Falta nombre", "warning"); if (p.correo && !/^[^@\s]+@[^@\s]+\.[^@\s]+$/.test(p.correo)) return T("Correo inválido", "warning"); try { if (isCreate) { await postJSON(API.iTutor, p); T("Tutor creado", "exito") } else { await postJSON(API.uTutor, p); T("Cambios guardados", "exito") } const f = qs("#t_foto_inp") && qs("#t_foto_inp").files && qs("#t_foto_inp").files[0]; if (f) { const v = validarImagen(f, { maxMB: 2 }); if (!v.ok) T(v.error, "error"); else { const fd = new FormData(); fd.append("tutor_id", String(it ? it.id : p.id || "")); fd.append("imagen", f); try { const r = await fetch(UPLOAD.tutorImg, { method: "POST", body: fd }); if (r.ok) { T("Foto actualizada", "exito") } else { T("No se pudo subir la foto", "error") } } catch { T("No se pudo subir la foto", "error") } } } await loadTutores(); const re = S.tutores.find(x => x.nombre === p.nombre) || S.tutores.find(x => x.id === (it && it.id)); re && openDrawer("Tutor · " + re.nombre, renderTutorDrawer({ id: String(re.id) })) } catch { T("No se pudo guardar", "error") } });
      qs("#t_del") && qs("#t_del").addEventListener("click", async e => { const b = e.currentTarget, st = b.getAttribute("data-step") || "1"; if (st === "1") { b.textContent = "Confirmar"; b.setAttribute("data-step", "2"); setTimeout(() => { if (b.getAttribute("data-step") === "2") { b.textContent = "Eliminar"; b.setAttribute("data-step", "1") } }, 3500); return } try { await postJSON(API.uTutor, { id: it.id, estatus: 0 }); T("Tutor inactivado", "exito"); closeDrawer(); await loadTutores() } catch { T("No se pudo eliminar", "error") } });
    }, 0); return html
  }

  // ================= SUSCRIPCIONES ====================
  function drawSubs() { qs("#mod-title") && (qs("#mod-title").textContent = "Suscripciones"); qs("#recursos-list") && (qs("#recursos-list").innerHTML = '<div class="empty-state" style="padding:1rem;">Módulo de Suscripciones en construcción</div>'); qs("#recursos-list-mobile") && (qs("#recursos-list-mobile").innerHTML = "");[qs("#pagination-controls"), qs("#pagination-mobile")].forEach(c => { c && (c.innerHTML = "") }) }

  // -------- Toolbar
  function bindUI() {
    qsa(".gc-side .nav-item").forEach(a => {
      a.addEventListener("click", (e) => {
        const route = a.getAttribute("data-route") || a.getAttribute("href");
        if (!route) return;
        if (location.hash !== route) { location.hash = route; }
        else { onRouteChange(); }
      });
    });

    const close = qs("#drawer-close");
    close && close.addEventListener("click", closeDrawer);

    const ov = qs("#gc-dash-overlay");
    ov && ov.addEventListener("click", (e) => { if (e?.target?.id === "gc-dash-overlay") closeDrawer(); });

    const add = qs("#btn-add");
    if (add) add.addEventListener("click", async () => {
      if (!IS_ADMIN) return;
      if (S.route.indexOf("#/cursos") === 0) await openCreateCurso();
      else if (S.route.indexOf("#/tutores") === 0) openDrawer("Tutor · Crear", renderTutorDrawer({ id: "" }));
      else if (S.route.indexOf("#/noticias") === 0) T("Crear noticia: pendiente", "warning");
    });
  }

  // -------- INIT
  D.addEventListener("DOMContentLoaded", async () => { CUR_USER = getUsuarioFromCookie(); const uid = Number((CUR_USER && CUR_USER.id) || 0); IS_ADMIN = ADMIN_IDS.indexOf(uid) >= 0; applyAdminVisibility(IS_ADMIN); bindUI(); try { await Promise.all([getTMap(), getPMap(), getCMap(), getCalMap(), getTipoMap(), getActMap()]) } catch (e) { L("catalog init err", e) } if (!location.hash) location.hash = IS_ADMIN ? "#/cursos" : "#/cuentas"; onRouteChange() });
})();

