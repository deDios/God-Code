
(() => {
  "use strict";/* ==== DEBUG ==== */
  window.GC_DEBUG = false; function gcLog() { if (window.GC_DEBUG && typeof console !== "undefined") { try { console.log("[GC]", ...arguments) } catch { } } }
  const setVH = () => { document.documentElement.style.setProperty("--vh", `${window.innerHeight * 0.01}px`) }; setVH(); window.addEventListener("resize", setVH);
  /* ==== ENDPOINTS ==== */
  const API = { cursos: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_cursos.php", iCursos: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/i_cursos.php", uCursos: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/u_cursos.php", noticias: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_noticia.php", uNoticias: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/u_noticia.php", comentarios: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_comentario_noticia.php", tutores: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_tutor.php", iTutor: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/i_tutor.php", uTutor: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/u_tutor.php", prioridad: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_prioridad.php", categorias: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_categorias.php", calendario: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_dias_curso.php", tipoEval: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_tipo_evaluacion.php", actividades: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/c_actividades.php" };
  const API_UPLOAD = { cursoImg: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/u_cursoImg.php", tutorImg: "https://godcode-dqcwaceacpf2bfcd.mexicocentral-01.azurewebsites.net/db/web/u_tutorImg.php"/* noticiaImg opcional */ };
  /* ==== ADMIN ==== */
  const ADMIN_IDS = [1, 12, 13];
  /* ==== STATE ==== */
  const S = { route: "#/cursos", page: 1, pageSize: 10, data: [], raw: [], tutorsMap: null, prioMap: null, categoriasMap: null, calendarioMap: null, tipoEvalMap: null, actividadesMap: null, currentDrawer: null, tempNewCourseImage: null, tutores: [] }; let currentUser = null; let IS_ADMIN = false;
  /* ==== Helpers DOM/UI ==== */
  const qs = (s, r = document) => r.querySelector(s); const qsa = (s, r = document) => Array.prototype.slice.call(r.querySelectorAll(s)); const T = (m, t = "exito", d = 2500) => window.gcToast ? window.gcToast(m, t, d) : gcLog(`[${t}] ${m}`);
  function getUsuarioFromCookie() { const row = (document.cookie || "").split("; ").find(r => r.indexOf("usuario=") === 0); if (!row) return null; const raw = row.split("=")[1] || ""; try { const once = decodeURIComponent(raw); const maybeTwice = /%7B|%22/.test(once) ? decodeURIComponent(once) : once; return JSON.parse(maybeTwice) } catch (e) { gcLog("cookie parse fail", e); return null } }
  /* ==== Cuenta panel (solo user no admin) ==== */
  function showCuentaPanel() { try { const el = qs(".recursos-box.desktop-only"); el && el.style && (el.style.display = "none") } catch { } try { const el = qs(".recursos-box.mobile-only"); el && el.style && (el.style.display = "none") } catch { } try { const p = qs("#pagination-controls"); p && p.style && (p.style.display = "none") } catch { } try { const p = qs("#pagination-mobile"); p && p.style && (p.style.display = "none") } catch { } if (!qs("#cuenta-panel")) { const host = qs(".main-content") || document.body; const panel = document.createElement("div"); panel.id = "cuenta-panel"; panel.style.padding = "16px 18px"; panel.innerHTML = window.renderCuentaOpciones ? window.renderCuentaOpciones() : "<div>Panel de cuenta</div>"; host.appendChild(panel) } } function hideCuentaPanel() { const p = qs("#cuenta-panel"); p && p.remove(); const d = qs(".recursos-box.desktop-only"); d && (d.style.display = "block"); const m = qs(".recursos-box.mobile-only"); m && (m.style.display = "block"); const pg = qs("#pagination-controls"); pg && (pg.style.display = ""); const pgm = qs("#pagination-mobile"); pgm && (pgm.style.display = "") }
  /* ==== postJSON ==== */
  async function postJSON(url, body) { gcLog("postJSON ->", url, "payload:", body); const res = await fetch(url, { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(body || {}) }); const text = await res.text().catch(() => ""); gcLog("postJSON <-", url, "status:", res.status, "raw:\n", text); if (!res.ok) throw new Error("HTTP " + res.status + " " + (text || "")); if (!text || !String(text).trim()) return {}; try { return JSON.parse(text) } catch { return { _raw: text } } }
  /* ==== CatÃ¡logos con cache ==== */
  async function getTutorsMap() { if (S.tutorsMap && Date.now() - S.tutorsMap._ts < 18e5) return S.tutorsMap; const arr = await postJSON(API.tutores, { estatus: 1 }); const map = {}; (Array.isArray(arr) ? arr : []).forEach(t => { map[t.id] = t.nombre }); map._ts = Date.now(); S.tutorsMap = map; return map }
  async function getPrioridadMap() { if (S.prioMap && Date.now() - S.prioMap._ts < 18e5) return S.prioMap; const arr = await postJSON(API.prioridad, { estatus: 1 }); const map = {}; (Array.isArray(arr) ? arr : []).forEach(p => { map[p.id] = p.nombre }); map._ts = Date.now(); S.prioMap = map; return map }
  async function getCategoriasMap() { if (S.categoriasMap && Date.now() - S.categoriasMap._ts < 18e5) return S.categoriasMap; const arr = await postJSON(API.categorias, { estatus: 1 }); const map = {}; (Array.isArray(arr) ? arr : []).forEach(c => { map[c.id] = c.nombre }); map._ts = Date.now(); S.categoriasMap = map; return map }
  async function getCalendarioMap() { if (S.calendarioMap && Date.now() - S.calendarioMap._ts < 18e5) return S.calendarioMap; const arr = await postJSON(API.calendario, { estatus: 1 }); const map = {}; (Array.isArray(arr) ? arr : []).forEach(c => { map[c.id] = c.nombre }); map._ts = Date.now(); S.calendarioMap = map; return map }
  async function getTipoEvalMap() { if (S.tipoEvalMap && Date.now() - S.tipoEvalMap._ts < 18e5) return S.tipoEvalMap; const arr = await postJSON(API.tipoEval, { estatus: 1 }); const map = {}; (Array.isArray(arr) ? arr : []).forEach(c => { map[c.id] = c.nombre }); map._ts = Date.now(); S.tipoEvalMap = map; return map }
  async function getActividadesMap() { if (S.actividadesMap && Date.now() - S.actividadesMap._ts < 18e5) return S.actividadesMap; const arr = await postJSON(API.actividades, { estatus: 1 }); const map = {}; (Array.isArray(arr) ? arr : []).forEach(c => { map[c.id] = c.nombre }); map._ts = Date.now(); S.actividadesMap = map; return map }
  /* ==== Roles/visibilidad ==== */
  function isCuentasLink(el) { const href = (el.getAttribute("href") || el.dataset.route || "").toLowerCase(); const txt = (el.textContent || "").toLowerCase(); return href.indexOf("#/cuentas") >= 0 || txt.indexOf("cuenta") >= 0 }
  function applyAdminVisibility(isAdmin) { qsa(".gc-side .nav-item").forEach(a => { if (!isAdmin && !isCuentasLink(a)) { (a.closest && a.closest("li") ? a.closest("li") : a).style.display = "none"; a.setAttribute("tabindex", "-1"); a.setAttribute("aria-hidden", "true") } }); const addBtn = qs("#btn-add"); addBtn && (addBtn.style.display = isAdmin ? "" : "none") }
  function enforceRouteGuard() { if (!IS_ADMIN) { const h = (window.location.hash || "").toLowerCase(); if (h.indexOf("#/cuentas") !== 0) { if (location.hash !== "#/cuentas") location.hash = "#/cuentas" } } }
  /* ==== Router ==== */
  function setRoute(hash) { const target = hash || (IS_ADMIN ? "#/cursos" : "#/cuentas"); if (location.hash !== target) location.hash = target; else onRouteChange() } window.addEventListener("hashchange", onRouteChange);
  function onRouteChange() { enforceRouteGuard(); const hash = window.location.hash || (IS_ADMIN ? "#/cursos" : "#/cuentas"); S.route = hash; S.page = 1; qsa(".gc-side .nav-item").forEach(a => { const isActive = a.getAttribute("href") === hash; a.classList && a.classList.toggle("is-active", isActive); a.setAttribute("aria-current", isActive ? "page" : "false") }); if (hash.indexOf("#/cursos") === 0) { hideCuentaPanel(); return IS_ADMIN ? loadCursos() : enforceRouteGuard() } if (hash.indexOf("#/noticias") === 0) { hideCuentaPanel(); return IS_ADMIN ? loadNoticias() : enforceRouteGuard() } if (hash.indexOf("#/tutores") === 0) { hideCuentaPanel(); return IS_ADMIN ? loadTutores() : enforceRouteGuard() } if (hash.indexOf("#/suscripciones") === 0) { hideCuentaPanel(); return loadSuscripciones() } if (hash.indexOf("#/cuentas") === 0) { showCuentaPanel(); return } return setRoute(IS_ADMIN ? "#/cursos" : "#/cuentas") }
  /* ==== Skeleton ==== */
  function showSkeletons() { const d = qs("#recursos-list"); const m = qs("#recursos-list-mobile"); d && (d.innerHTML = ""); m && (m.innerHTML = ""); const target = d || m; if (!target) return; for (let i = 0; i < 5; i++) { target.insertAdjacentHTML("beforeend", '<div class="sk-row"><div class="sk n1"></div><div class="sk n2"></div><div class="sk n3"></div></div>') } } const skeleton = showSkeletons;
  /* ==== List gen/pagination ==== */
  function renderList(rows, config) { const d = qs("#recursos-list"), m = qs("#recursos-list-mobile"); d && (d.innerHTML = ""); m && (m.innerHTML = ""); if (!rows.length) { d && (d.innerHTML = '<div class="empty-state" style="padding:1rem;">Sin resultados</div>'); m && (m.innerHTML = '<div class="empty-state" style="padding:1rem;">Sin resultados</div>'); const countEl = qs("#mod-count"); countEl && (countEl.textContent = "0 resultados"); renderPagination(0); return } const start = (S.page - 1) * S.pageSize, pageRows = rows.slice(start, start + S.pageSize); pageRows.forEach(item => { d && d.insertAdjacentHTML("beforeend", config.desktopRow(item)); m && m.insertAdjacentHTML("beforeend", config.mobileRow(item)) }); const countEl = qs("#mod-count"); countEl && (countEl.textContent = rows.length + " " + (rows.length === 1 ? "elemento" : "elementos")); qsa("#recursos-list .table-row").forEach(el => { el.addEventListener("click", function () { const data = el.dataset || {}; if (data.type === "noticia") { S.currentDrawer = { type: "noticia", id: Number(data.id), mode: "view" } } if (data.type === "curso") { S.currentDrawer = { type: "curso", id: Number(data.id), mode: "view" } } if (data.type === "tutor") { S.currentDrawer = { type: "tutor", id: Number(data.id), mode: "view" } } if (data.type === "noticia") { openDrawer(config.drawerTitle(data), config.drawerBody(data)); const nid = Number(data.id); setTimeout(() => { mountReadOnlyMedia({ container: document.getElementById("media-noticia"), type: "noticia", id: nid, labels: ["Imagen 1", "Imagen 2"] }); if (IS_ADMIN) bindCopyFromPre("#json-noticia", "#btn-copy-json-noticia") }, 0) } else if (data.type === "curso") { openDrawer(config.drawerTitle(data), config.drawerBody(data)) } else if (data.type === "tutor") { openDrawer(config.drawerTitle(data), config.drawerBody(data)) } }) }); qsa("#recursos-list-mobile .row-toggle").forEach(el => { el.addEventListener("click", function () { const row = el.closest(".table-row-mobile"); row && row.classList && row.classList.toggle("expanded") }) }); qsa("#recursos-list-mobile .open-drawer").forEach(btn => { btn.addEventListener("click", function (e) { e.stopPropagation(); const host = btn.closest(".table-row-mobile"); const data = (host && host.dataset) || {}; if (data.type === "noticia") { S.currentDrawer = { type: "noticia", id: Number(data.id), mode: "view" } } if (data.type === "curso") { S.currentDrawer = { type: "curso", id: Number(data.id), mode: "view" } } if (data.type === "tutor") { S.currentDrawer = { type: "tutor", id: Number(data.id), mode: "view" } } openDrawer(config.drawerTitle(data), config.drawerBody(data)); if (data.type === "noticia") { const nid = Number(data.id); setTimeout(() => { mountReadOnlyMedia({ container: document.getElementById("media-noticia"), type: "noticia", id: nid, labels: ["Imagen 1", "Imagen 2"] }); if (IS_ADMIN) bindCopyFromPre("#json-noticia", "#btn-copy-json-noticia") }, 0) } }) }); qsa(".gc-reactivate").forEach(btn => { btn.addEventListener("click", async function (e) { e.stopPropagation(); const id = Number(btn.getAttribute("data-id")); const t = btn.getAttribute("data-type"); try { if (t === "curso") { await reactivateCurso(id); T("Curso reactivado", "exito"); await loadCursos() } else if (t === "noticia") { const ok = await reactivateNoticia(id); if (ok) { T("Noticia reactivada", "exito"); await loadNoticias() } } } catch (err) { gcLog(err); T("No se pudo reactivar", "error") } }) }); renderPagination(rows.length) }
  function renderPagination(total) { const totalPages = Math.max(1, Math.ceil(total / S.pageSize));[qs("#pagination-controls"), qs("#pagination-mobile")].forEach(cont => { if (!cont) return; cont.innerHTML = ""; if (totalPages <= 1) return; const prev = document.createElement("button"); prev.className = "arrow-btn"; prev.textContent = "â¹"; prev.disabled = S.page === 1; prev.onclick = function () { S.page = Math.max(1, S.page - 1); refreshCurrent() }; cont.appendChild(prev); for (let p = 1; p <= totalPages && p <= 7; p++) { const b = document.createElement("button"); b.className = "page-btn" + (p === S.page ? " active" : ""); b.textContent = p; b.onclick = function () { S.page = p; refreshCurrent() }; cont.appendChild(b) } const next = document.createElement("button"); next.className = "arrow-btn"; next.textContent = "âº"; next.disabled = S.page === totalPages; next.onclick = function () { S.page = Math.min(totalPages, S.page + 1); refreshCurrent() }; cont.appendChild(next) }) }
  function refreshCurrent() { if (S.route.indexOf("#/cursos") === 0) return drawCursos(); if (S.route.indexOf("#/noticias") === 0) return drawNoticias(); if (S.route.indexOf("#/tutores") === 0) return drawTutores(); if (S.route.indexOf("#/cuentas") === 0) return }
  /* =================== CURSOS =================== */
  function badgePrecio(precio) { return Number(precio) === 0 ? '<span class="gc-chip gray">Gratuito</span>' : '<span class="gc-chip gray">Con costo</span>' }
  function badgeCurso(estatus) { return Number(estatus) === 1 ? '<span class="gc-badge-activo">Activo</span>' : '<span class="gc-badge-inactivo">Inactivo</span>' }
  function textCursoStatus(estatus) { return Number(estatus) === 1 ? "Activo" : "Inactivo" }
  function normalizeCursoPayload(p) { return { ...p, nombre: String(p.nombre || ""), descripcion_breve: String(p.descripcion_breve || ""), descripcion_curso: String(p.descripcion_curso || ""), descripcion_media: String(p.descripcion_media || ""), dirigido: String(p.dirigido || ""), competencias: String(p.competencias || ""), certificado: Number(!!p.certificado), tutor: Number(p.tutor || 0), horas: Number(p.horas || 0), precio: Number(p.precio || 0), estatus: Number(p.estatus != null ? p.estatus : 1), prioridad: Number(p.prioridad || 1), categoria: Number(p.categoria || 1), calendario: Number(p.calendario || 1), tipo_evaluacion: Number(p.tipo_evaluacion || 1), actividades: Number(p.actividades || 1), creado_por: Number(p.creado_por || 0), fecha_inicio: String(p.fecha_inicio || "") } }
  async function loadCursos() { const title = qs("#mod-title"); title && (title.textContent = "Cursos"); const hdr = qs(".recursos-box.desktop-only .table-header"); if (hdr) { const c1 = hdr.querySelector(".col-nombre"); let c2 = hdr.querySelector(".col-tutor") || hdr.querySelector(".col-tipo"); const c3 = hdr.querySelector(".col-fecha"); let c4 = hdr.querySelector(".col-status"); c1 && (c1.textContent = "Nombre"); if (c2) { c2.textContent = "Tutor"; c2.classList.add("col-tutor") } c3 && (c3.textContent = "Fecha de inicio"); if (!c4) { c4 = document.createElement("div"); c4.className = "col-status"; c4.setAttribute("role", "columnheader"); c4.textContent = "Status"; hdr.appendChild(c4) } else c4.textContent = "Status" } const tt = qs(".tt-title"); tt && (tt.textContent = "Cursos:"); const ttStatus = qs("#tt-status"); if (ttStatus) { ttStatus.textContent = "Activos e Inactivos"; ttStatus.classList.remove("badge-inactivo"); ttStatus.classList.add("badge-activo") } skeleton(); try { const [activosRaw, inactivosRaw, tmap, pmap, cmap, calmap, temap, ammap] = await Promise.all([postJSON(API.cursos, { estatus: 1 }), postJSON(API.cursos, { estatus: 0 }), getTutorsMap(), getPrioridadMap(), getCategoriasMap(), getCalendarioMap(), getTipoEvalMap(), getActividadesMap()]); const raw = [].concat(Array.isArray(activosRaw) ? activosRaw : [], Array.isArray(inactivosRaw) ? inactivosRaw : []); S.raw = raw; S.data = raw.map(c => ({ id: c.id, nombre: c.nombre, tutor: tmap && tmap[c.tutor] ? tmap[c.tutor] : "Tutor #" + c.tutor, tutor_id: c.tutor, prioridad_id: c.prioridad, prioridad_nombre: (pmap && pmap[c.prioridad]) || "#" + c.prioridad, categoria_id: c.categoria, categoria_nombre: (cmap && cmap[c.categoria]) || "#" + c.categoria, calendario_id: c.calendario, calendario_nombre: (calmap && calmap[c.calendario]) || "#" + c.calendario, tipo_eval_id: c.tipo_evaluacion, tipo_eval_nombre: (temap && temap[c.tipo_evaluacion]) || "#" + c.tipo_evaluacion, actividades_id: c.actividades, actividades_nombre: (ammap && ammap[c.actividades]) || "#" + c.actividades, precio: c.precio, certificado: !!c.certificado, fecha: c.fecha_inicio, estatus: Number(c.estatus), _all: c })); drawCursos() } catch (err) { const list = qs("#recursos-list"); list && (list.innerHTML = '<div style="padding:1rem;color:#b00020;">Error al cargar cursos</div>'); const m = qs("#recursos-list-mobile"); m && (m.innerHTML = ""); gcLog(err); T("No se pudieron cargar cursos", "error") } }
  function drawCursos() { const rows = S.data; renderList(rows, { desktopRow: it => `<div class="table-row" data-id="${it.id}" data-type="curso"><div class="col-nombre"><span class="name-text">${escapeHTML(it.nombre)}</span>${badgePrecio(it.precio)}</div><div class="col-tutor">${escapeHTML(it.tutor)}</div><div class="col-fecha">${fmtDate(it.fecha)}</div><div class="col-status">${badgeCurso(it.estatus)}</div></div>`, mobileRow: it => `<div class="table-row-mobile" data-id="${it.id}" data-type="curso"><button class="row-toggle"><div class="col-nombre">${escapeHTML(it.nombre)} ${badgePrecio(it.precio)}</div><span class="icon-chevron">âº</span></button><div class="row-details"><div><strong>Tutor:</strong> ${escapeHTML(it.tutor)}</div><div><strong>Inicio:</strong> ${fmtDate(it.fecha)}</div><div><strong>Status:</strong> ${textCursoStatus(it.estatus)}</div><div style="display:flex; gap:8px; margin:.25rem 0 .5rem;"><button class="gc-btn gc-btn--ghost open-drawer">Ver detalle</button>${Number(it.estatus) === 0 ? `<button class="gc-btn gc-btn--success gc-reactivate" data-type="curso" data-id="${it.id}">Reactivar</button>` : ""}</div></div></div>`, drawerTitle: d => { const item = S.data.find(x => String(x.id) === d.id); return item ? "Curso Â· " + item.nombre : "Curso" }, drawerBody: d => renderCursoDrawer(d) }) }
  function renderCursoDrawer(dataset) {
    const item = S.data.find(x => String(x.id) === dataset.id); const mode = (S.currentDrawer && S.currentDrawer.mode) || (item ? "view" : "create"); const isCreate = mode === "create" || !item, isEdit = mode === "edit", isView = mode === "view" && !!item; const c = isCreate ? getEmptyCourse() : item ? item._all : null; if (!c) return "<p>No encontrado.</p>"; const inText = (id, val, ph) => '<input id="' + id + '" type="text" value="' + escapeAttr(val || "") + '" placeholder="' + escapeAttr(ph || "") + '" />', inNum = (id, val, min) => '<input id="' + id + '" type="number" value="' + escapeAttr(val != null ? val : "") + '" min="' + (min || "0") + '" />', inDate = (id, val) => '<input id="' + id + '" type="date" value="' + escapeAttr(val || "") + '" />', inCheck = (id, val) => '<label class="gc-inline"><input id="' + id + '" type="checkbox" ' + (Number(val) ? "checked" : "") + '/> <span>SÃ­</span></label>', inSel = (id, opts) => '<select id="' + id + '">' + opts + "</select>", inTA = (id, val, rows) => '<textarea id="' + id + '" rows="' + (rows || 4) + '">' + escapeHTML(val || "") + "</textarea>"; const tutorOptions = mapToOptions(S.tutorsMap, String(c.tutor || "")), prioOptions = mapToOptions(S.prioMap, String(c.prioridad || "")), catOptions = mapToOptions(S.categoriasMap, String(c.categoria || "")), calOptions = mapToOptions(S.calendarioMap, String(c.calendario || "")), tipoOptions = mapToOptions(S.tipoEvalMap, String(c.tipo_evaluacion || "")), actOptions = mapToOptions(S.actividadesMap, String(c.actividades || "")); const field = (label, value, inputHTML) => '<div class="field"><div class="label">' + escapeHTML(label) + '</div><div class="value">' + ((isEdit || isCreate) ? inputHTML : escapeHTML(value != null ? value : "-")) + "</div></div>"; let controlsRow = ""; if (isCreate) { controlsRow = '<div class="gc-actions"><button class="gc-btn gc-btn--ghost" id="btn-cancel">Cancelar</button><button class="gc-btn gc-btn--primary" id="btn-save">Guardar</button></div>' } else if (IS_ADMIN) { const isInactive = Number(c.estatus) === 0; controlsRow = '<div class="gc-actions">' + (isView ? '<button class="gc-btn" id="btn-edit">Editar</button>' : "") + (isEdit ? '<button class="gc-btn gc-btn--ghost" id="btn-cancel">Cancelar</button>' : "") + (isEdit ? '<button class="gc-btn gc-btn--primary" id="btn-save">Guardar</button>' : "") + '<button class="gc-btn gc-btn--danger" id="btn-delete" data-step="1">Eliminar</button>' + (isInactive ? '<button class="gc-btn gc-btn--success" id="btn-reactivar">Reactivar</button>' : "") + "</div>" } let html = "" + controlsRow + field("Nombre", c.nombre, inText("f_nombre", c.nombre, "Nombre del curso")) + field("DescripciÃ³n breve", c.descripcion_breve, inTA("f_desc_breve", c.descripcion_breve, 3)) + field("DescripciÃ³n media", c.descripcion_media, inTA("f_desc_media", c.descripcion_media, 4)) + field("DescripciÃ³n del curso", c.descripcion_curso, inTA("f_desc_curso", c.descripcion_curso, 6)) + field("Dirigido a", c.dirigido, inTA("f_dirigido", c.dirigido, 3)) + field("Competencias", c.competencias, inTA("f_competencias", c.competencias, 3)) + '<div class="grid-3">' + field("Tutor", (S.tutorsMap && S.tutorsMap[c.tutor]) || c.tutor, inSel("f_tutor", tutorOptions)) + field("CategorÃ­a", (S.categoriasMap && S.categoriasMap[c.categoria]) || c.categoria, inSel("f_categoria", catOptions)) + field("Prioridad", (S.prioMap && S.prioMap[c.prioridad]) || c.prioridad, inSel("f_prioridad", prioOptions)) + "</div>" + '<div class="grid-3">' + field("Tipo de evaluaciÃ³n", (S.tipoEvalMap && S.tipoEvalMap[c.tipo_evaluacion]) || c.tipo_evaluacion, inSel("f_tipo_eval", tipoOptions)) + field("Actividades", (S.actividadesMap && S.actividadesMap[c.actividades]) || c.actividades, inSel("f_actividades", actOptions)) + field("Calendario", (S.calendarioMap && S.calendarioMap[c.calendario]) || c.calendario, inSel("f_calendario", calOptions)) + "</div>" + '<div class="grid-3">' + field("Horas", c.horas, inNum("f_horas", c.horas != null ? c.horas : 0)) + field("Precio", c.precio === 0 ? "Gratuito" : fmtMoney(c.precio), inNum("f_precio", c.precio != null ? c.precio : 0)) + field("Certificado", Number(c.certificado) ? "SÃ­" : "No", inCheck("f_certificado", c.certificado)) + "</div>" + field("Fecha de inicio", c.fecha_inicio, inDate("f_fecha", c.fecha_inicio)); if (isCreate) { html += `<div class="field"><div class="label">Imagen del curso</div><div class="value"><div id="create-media-curso" class="media-grid"><div class="media-card"><figure class="media-thumb"><img id="create-media-thumb" alt="Portada" src="${withBust("/ASSETS/cursos/img0.png")}" /><button class="icon-btn media-edit" id="create-media-edit" title="Seleccionar imagen"><svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.0 1.0 0 0 0 0-1.41l-2.34-2.34a1.0 1.0 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" fill="currentColor"></path></svg></button></figure><div class="media-meta"><div class="media-label">Portada</div><div class="media-help" style="color:#666;">JPG/PNG Â· MÃ¡x 2MB</div></div></div></div></div></div>` } else { html += `<div class="field"><div class="label">ImÃ¡genes existentes</div><div class="value"><div id="media-curso" data-id="${c.id || (item ? item.id : "")}"></div></div></div>` } if (IS_ADMIN) { html += jsonSection(c, "JSON Â· Curso", "json-curso", "btn-copy-json-curso") } if (isCreate) { qs("#drawer-title").textContent = "Curso Â· Crear"; S.currentDrawer = { type: "curso", id: null, mode: "create" } }
    else if (isEdit) { qs("#drawer-title").textContent = "Curso Â· " + (item ? item.nombre : "") + " (ediciÃ³n)"; S.currentDrawer = { type: "curso", id: item ? item.id : null, mode: "edit" } }
    else { qs("#drawer-title").textContent = "Curso Â· " + (item ? item.nombre : ""); S.currentDrawer = { type: "curso", id: item ? item.id : null, mode: "view" } } setTimeout(function () { try { disableDrawerInputs(!(isEdit || isCreate)); if (isCreate) { const card = document.getElementById("create-media-curso"); const btn = document.getElementById("create-media-edit"); const thumb = document.getElementById("create-media-thumb"); if (btn && thumb && card) { btn.addEventListener("click", function () { const input = document.createElement("input"); input.type = "file"; input.accept = "image/png, image/jpeg"; input.style.display = "none"; document.body.appendChild(input); input.addEventListener("change", function () { const file = input.files && input.files[0]; try { document.body.removeChild(input) } catch { } if (!file) return; const v = validarImagen(file, { maxMB: 2 }); if (!v.ok) { T(v.error, "error"); return } renderPreviewUI(card, file, async function () { S.tempNewCourseImage = file; try { if (thumb.dataset && thumb.dataset.blobUrl) URL.revokeObjectURL(thumb.dataset.blobUrl) } catch { } const blobUrl = URL.createObjectURL(file); thumb.dataset && (thumb.dataset.blobUrl = blobUrl); thumb.src = blobUrl; T("Imagen seleccionada (se subirÃ¡ al guardar)", "exito") }, function () { }) }); input.click() }) } } const btnSave = qs("#btn-save"); btnSave && btnSave.addEventListener("click", async function (e) { e.stopPropagation(); try { if (isCreate) await saveNewCurso(); else await saveUpdateCurso(item) } catch (err) { gcLog(err); T("Error al guardar", "error") } }); const btnEdit = qs("#btn-edit"); btnEdit && btnEdit.addEventListener("click", function (e) { e.stopPropagation(); S.currentDrawer = { type: "curso", id: item ? item.id : null, mode: "edit" }; qs("#drawer-body").innerHTML = renderCursoDrawer({ id: String(item ? item.id : "") }) }); const btnCancel = qs("#btn-cancel"); btnCancel && btnCancel.addEventListener("click", function (e) { e.stopPropagation(); if (isCreate) { S.tempNewCourseImage = null; closeDrawer() } else { S.currentDrawer = { type: "curso", id: item ? item.id : null, mode: "view" }; qs("#drawer-body").innerHTML = renderCursoDrawer({ id: String(item ? item.id : "") }) } }); const bDel = qs("#btn-delete"); bDel && bDel.addEventListener("click", async function (e) { e.stopPropagation(); const step = bDel.getAttribute("data-step") || "1"; if (step === "1") { bDel.textContent = "Confirmar"; bDel.setAttribute("data-step", "2"); setTimeout(function () { if (bDel.getAttribute("data-step") === "2") { bDel.textContent = "Eliminar"; bDel.setAttribute("data-step", "1") } }, 4e3); return } try { await softDeleteCurso(item); T("Curso eliminado (inactivo)", "exito"); closeDrawer(); await loadCursos() } catch (err) { gcLog(err); T("No se pudo eliminar", "error") } }); const btnRea = qs("#btn-reactivar"); btnRea && btnRea.addEventListener("click", async function (e) { e.stopPropagation(); try { await reactivateCurso(Number(item && item.id)); T("Curso reactivado", "exito"); await loadCursos(); const re = S.data.find(x => x.id === (item && item.id)); re && openDrawer("Curso Â· " + re.nombre, renderCursoDrawer({ id: String(re.id) })) } catch (err) { gcLog(err); T("No se pudo reactivar", "error") } }); const contCurso = document.getElementById("media-curso"); if (contCurso) { const cid = Number(c.id || (item ? item.id : 0)); if (!isNaN(cid) && cid) { mountReadOnlyMedia({ container: contCurso, type: "curso", id: cid, labels: ["Portada"], editable: isEdit && IS_ADMIN }) } } IS_ADMIN && bindCopyFromPre("#json-curso", "#btn-copy-json-curso") } catch (err) { gcLog("renderCursoDrawer bindings error:", err); T("OcurriÃ³ un error al preparar el formulario", "error") } }, 0); return html
  }
  function disableDrawerInputs(disabled) { qsa("#drawer-body input, #drawer-body select, #drawer-body textarea").forEach(el => { el.disabled = !!disabled }) }
  function getEmptyCourse() { return { nombre: "", descripcion_breve: "", descripcion_curso: "", descripcion_media: "", dirigido: "", competencias: "", certificado: 0, tutor: "", horas: 0, precio: 0, estatus: 1, fecha_inicio: "", prioridad: 1, categoria: 1, calendario: 1, tipo_evaluacion: 1, actividades: 1, creado_por: Number((currentUser && currentUser.id) || 0) || 1 } }
  function mapToOptions(map, selectedId) { if (!map || typeof map !== "object") return '<option value="">â</option>'; const pairs = Object.keys(map).filter(k => k !== "_ts").map(k => [k, map[k]]); if (!pairs.length) return '<option value="">â</option>'; return pairs.map(pair => { const id = pair[0], name = pair[1]; const sel = String(selectedId) === String(id) ? " selected" : ""; return '<option value="' + escapeAttr(id) + '"' + sel + ">" + escapeHTML(name) + "</option>" }).join("") }
  function readCursoForm(existingId) { const read = id => { const el = qs("#" + id); return el ? el.value : "" }; const readN = (id, def) => Number(read(id) || def || 0); const readCh = id => { const el = qs("#" + id); return el && el.checked ? 1 : 0 }; const payload = { nombre: read("f_nombre"), descripcion_breve: read("f_desc_breve"), descripcion_curso: read("f_desc_curso"), descripcion_media: read("f_desc_media"), dirigido: read("f_dirigido"), competencias: read("f_competencias"), certificado: readCh("f_certificado"), tutor: readN("f_tutor", 0), horas: readN("f_horas", 0), precio: readN("f_precio", 0), estatus: 1, fecha_inicio: read("f_fecha"), prioridad: readN("f_prioridad", 1), categoria: readN("f_categoria", 1), calendario: readN("f_calendario", 1), tipo_evaluacion: readN("f_tipo_eval", 1), actividades: readN("f_actividades", 1), creado_por: Number((currentUser && currentUser.id) || 0) || 1 }; if (existingId != null) payload.id = Number(existingId); return payload }
  async function uploadCursoImagen(cursoId, file) { if (!API_UPLOAD || !API_UPLOAD.cursoImg) throw new Error("API_UPLOAD.cursoImg no configurado"); const v = validarImagen(file, { maxMB: 2 }); if (!v.ok) throw new Error(v.error); const fd = new FormData(); fd.append("curso_id", String(cursoId)); fd.append("imagen", file); const res = await fetch(API_UPLOAD.cursoImg, { method: "POST", body: fd }); const text = await res.text().catch(() => ""); if (!res.ok) throw new Error("HTTP " + res.status + " " + (text || "")); try { return JSON.parse(text) } catch { return { _raw: text } } }
  async function saveNewCurso() { const payload = normalizeCursoPayload(readCursoForm(null)); if (!payload.nombre) return T("Falta el nombre", "warning"); if (!payload.tutor) return T("Selecciona tutor", "warning"); if (!payload.categoria) return T("Selecciona categorÃ­a", "warning"); if (!payload.fecha_inicio) return T("Fecha de inicio requerida", "warning"); const res = await postJSON(API.iCursos, payload); const newId = Number((res && (res.id || res.curso_id || res.insert_id || (res.data && res.data.id))) || 0); if (!newId) { gcLog("iCursos sin id:", res); T("Curso creado, pero no se recibiÃ³ ID", "warning") } const file = S.tempNewCourseImage || null; if (newId && file) { try { await uploadCursoImagen(newId, file); T("Imagen subida", "exito") } catch (err) { gcLog(err); T("Curso creado, pero fallÃ³ la subida de imagen", "error") } finally { S.tempNewCourseImage = null } } T("Curso creado", "exito"); closeDrawer(); await loadCursos(); if (newId) { const re = S.data.find(x => x.id === newId); re && openDrawer("Curso Â· " + re.nombre, renderCursoDrawer({ id: String(re.id) })) } }
  async function saveUpdateCurso(item) { if (!item || !item._all) return T("Sin item para actualizar", "error"); const payload = normalizeCursoPayload(readCursoForm(item.id)); await postJSON(API.uCursos, payload); const fEl = qs("#f_curso_img"); const f = fEl && fEl.files && fEl.files[0]; if (f) { try { await uploadCursoImagen(item.id, f); T("Imagen actualizada", "exito") } catch (err) { gcLog(err); T("Se guardÃ³ el curso, pero fallÃ³ la imagen", "error") } } T("Cambios guardados", "exito"); await loadCursos(); const re = S.data.find(x => x.id === item.id); re && openDrawer("Curso Â· " + re.nombre, renderCursoDrawer({ id: String(re.id) })) }
  async function softDeleteCurso(item) { if (!item || !item._all) throw new Error("Item invÃ¡lido"); const base = { ...item._all, estatus: 0 }; const payload = normalizeCursoPayload(base); await postJSON(API.uCursos, payload) }
  async function reactivateCurso(id) { const it = S.data.find(x => x.id === Number(id)); if (!it || !it._all) throw new Error("Curso no encontrado"); const body = normalizeCursoPayload({ ...it._all, estatus: 1 }); await postJSON(API.uCursos, body) }
  /* =================== NOTICIAS =================== */
  function badgeNoticia(estatus) { return Number(estatus) === 1 ? '<span class="gc-badge-activo">Publicada</span>' : '<span class="gc-badge-inactivo">Inactiva</span>' }
  async function loadNoticias() { const title = qs("#mod-title"); title && (title.textContent = "Noticias"); const hdr = qs(".recursos-box.desktop-only .table-header"); if (hdr) { const c1 = hdr.querySelector(".col-nombre"); let c2 = hdr.querySelector(".col-tutor") || hdr.querySelector(".col-tipo"); const c3 = hdr.querySelector(".col-fecha"); const c4 = hdr.querySelector(".col-status"); c1 && (c1.textContent = "TÃ­tulo"); if (c2) { c2.textContent = "Comentarios"; c2.classList.add("col-tipo") } c3 && (c3.textContent = "Fecha de publicaciÃ³n"); c4 && (c4.textContent = "Status") } const tt = qs(".tt-title"); tt && (tt.textContent = "Noticias:"); const ttStatus = qs("#tt-status"); if (ttStatus) { ttStatus.textContent = "Publicadas e Inactivas"; ttStatus.classList.remove("badge-inactivo"); ttStatus.classList.add("badge-activo") } skeleton(); try { const [activasRaw, inactivasRaw] = await Promise.all([postJSON(API.noticias, { estatus: 1 }), postJSON(API.noticias, { estatus: 0 })]); const arr = [].concat(Array.isArray(activasRaw) ? activasRaw : [], Array.isArray(inactivasRaw) ? inactivasRaw : []); const counts = await Promise.all(arr.map(n => getCommentsCount(n.id).catch(() => 0))); S.raw = arr; S.data = arr.map((n, i) => ({ id: n.id, titulo: n.titulo, fecha: n.fecha_creacion, estatus: Number(n.estatus), comentarios: counts[i] || 0, _all: n })); drawNoticias() } catch (err) { const list = qs("#recursos-list"); list && (list.innerHTML = '<div style="padding:1rem;color:#b00020;">Error al cargar noticias</div>'); const m = qs("#recursos-list-mobile"); m && (m.innerHTML = ""); gcLog(err); T("No se pudieron cargar noticias", "error") } }
  async function getCommentsCount(noticiaId) { const res = await postJSON(API.comentarios, { noticia_id: Number(noticiaId), estatus: 1 }); const arr = Array.isArray(res) ? res : []; let total = 0; for (let i = 0; i < arr.length; i++) { const c = arr[i]; total += 1; if (c && c.respuestas && Array.isArray(c.respuestas)) total += c.respuestas.length } return total }
  function drawNoticias() { const rows = S.data; renderList(rows, { desktopRow: it => `<div class="table-row" data-id="${it.id}" data-type="noticia"><div class="col-nombre"><span class="name-text">${escapeHTML(it.titulo)}</span></div><div class="col-tutor">${it.comentarios}</div><div class="col-fecha">${fmtDateTime(it.fecha)}</div><div class="col-status">${badgeNoticia(it.estatus)}</div></div>`, mobileRow: it => `<div class="table-row-mobile" data-id="${it.id}" data-type="noticia"><button class="row-toggle"><div class="col-nombre">${escapeHTML(it.titulo)}</div><span class="icon-chevron">âº</span></button><div class="row-details"><div><strong>Comentarios:</strong> ${it.comentarios}</div><div><strong>Publicada:</strong> ${fmtDateTime(it.fecha)}</div><div style="display:flex; gap:8px; margin:.25rem 0 .5rem;"><button class="gc-btn gc-btn--ghost open-drawer">Ver detalle</button>${Number(it.estatus) === 0 ? `<button class="gc-btn gc-btn--success gc-reactivate" data-type="noticia" data-id="${it.id}">Reactivar</button>` : ""}</div></div></div>`, drawerTitle: d => { const item = S.data.find(x => String(x.id) === d.id); return item ? "Noticia Â· " + item.titulo : "Noticia" }, drawerBody: d => renderNoticiaDrawer(d) }) }
  async function inactivateNoticia(id) { const it = S.data.find(x => x.id === Number(id)); if (!it || !it._all) throw new Error("Noticia no encontrada"); if (!API.uNoticias) throw new Error("Endpoint u_noticia no configurado"); const body = { ...it._all, estatus: 0 }; await postJSON(API.uNoticias, body) }
  async function reactivateNoticia(id) { const it = S.data.find(x => x.id === Number(id)); if (!it || !it._all) throw new Error("Noticia no encontrada"); if (!API.uNoticias) { T("Falta endpoint u_noticia.php en backend", "warning", 3500); return false } const body = { ...it._all, estatus: 1 }; await postJSON(API.uNoticias, body); return true }
  function renderNoticiaDrawer(dataset) { const item = S.data.find(x => String(x.id) === dataset.id); const n = item && item._all; if (!n) return "<p>No encontrado.</p>"; const mode = S.currentDrawer && S.currentDrawer.type === "noticia" && S.currentDrawer.id === n.id ? S.currentDrawer.mode : "view"; const isEdit = mode === "edit", isView = !isEdit, isInactive = Number(n.estatus) === 0; const controlsRow = IS_ADMIN ? '<div class="gc-actions">' + (isView ? '<button class="gc-btn" id="btn-edit">Editar</button>' : "") + (isEdit ? '<button class="gc-btn gc-btn--ghost" id="btn-cancel">Cancelar</button>' : "") + (isEdit ? '<button class="gc-btn gc-btn--primary" id="btn-save">Guardar</button>' : "") + (isInactive ? '<button class="gc-btn gc-btn--success" id="btn-reactivar">Reactivar</button>' : '<button class="gc-btn gc-btn--danger" id="btn-delete" data-step="1">Eliminar</button>') + "</div>" : ""; let html = "" + controlsRow + pair("TÃ­tulo", n.titulo) + pair("Estado", Number(n.estatus) === 1 ? "Publicada" : "Inactiva") + pair("Fecha publicaciÃ³n", fmtDateTime(n.fecha_creacion)) + pair("DescripciÃ³n (1)", n.desc_uno) + pair("DescripciÃ³n (2)", n.desc_dos) + pair("Creado por", n.creado_por) + '<div class="field"><div class="label">ImÃ¡genes</div><div class="value"><div id="media-noticia" data-id="' + n.id + '"></div></div></div>'; IS_ADMIN && (html += jsonSection(n, "JSON Â· Noticia", "json-noticia", "btn-copy-json-noticia")); if (isEdit) { qs("#drawer-title").textContent = "Noticia Â· " + (item ? item.titulo : "") + " (ediciÃ³n)"; S.currentDrawer = { type: "noticia", id: n.id, mode: "edit" } } else { qs("#drawer-title").textContent = "Noticia Â· " + (item ? item.titulo : ""); S.currentDrawer = { type: "noticia", id: n.id, mode: "view" } } setTimeout(function () { try { const be = qs("#btn-edit"); be && be.addEventListener("click", function (e) { e.stopPropagation(); S.currentDrawer = { type: "noticia", id: n.id, mode: "edit" }; qs("#drawer-body").innerHTML = renderNoticiaDrawer({ id: String(n.id) }) }); const bc = qs("#btn-cancel"); bc && bc.addEventListener("click", function (e) { e.stopPropagation(); S.currentDrawer = { type: "noticia", id: n.id, mode: "view" }; qs("#drawer-body").innerHTML = renderNoticiaDrawer({ id: String(n.id) }) }); const bs = qs("#btn-save"); bs && bs.addEventListener("click", async function (e) { e.stopPropagation(); T("Cambios guardados", "exito"); S.currentDrawer = { type: "noticia", id: n.id, mode: "view" }; await loadNoticias(); const re = S.data.find(x => x.id === n.id); re && openDrawer("Noticia Â· " + re.titulo, renderNoticiaDrawer({ id: String(re.id) })) }); const bDel = qs("#btn-delete"); bDel && bDel.addEventListener("click", async function (e) { e.stopPropagation(); const step = bDel.getAttribute("data-step") || "1"; if (step === "1") { bDel.textContent = "Confirmar"; bDel.setAttribute("data-step", "2"); setTimeout(function () { if (bDel.getAttribute("data-step") === "2") { bDel.textContent = "Eliminar"; bDel.setAttribute("data-step", "1") } }, 4e3); return } try { await inactivateNoticia(n.id); T("Noticia eliminada (inactiva)", "exito"); closeDrawer(); await loadNoticias() } catch (err) { gcLog(err); T("No se pudo eliminar", "error") } }); const br = qs("#btn-reactivar"); br && br.addEventListener("click", async function (e) { e.stopPropagation(); const ok = await reactivateNoticia(n.id); if (ok) { T("Noticia reactivada", "exito"); await loadNoticias(); const re = S.data.find(x => x.id === n.id); re && openDrawer("Noticia Â· " + re.titulo, renderNoticiaDrawer({ id: String(re.id) })) } }); disableDrawerInputs(!isEdit) } catch (err) { gcLog("renderNoticiaDrawer bindings error:", err) } }, 0); return html }
  /* =================== TUTORES (CRUD + FOTO) =================== */
  function badgeTutor(s) { return Number(s) === 1 ? '<span class="gc-badge-activo">Activo</span>' : '<span class="gc-badge-inactivo">Inactivo</span>' }
  function truncate(t, n) { t = String(t || ""); return t.length <= n ? t : t.slice(0, Math.max(0, n - 1)) + "â¦" }
  function getSearchQuery() { return (qs("#search-input")?.value || "").trim().toLowerCase() }
  function filterTutores(rows) { const q = getSearchQuery(); if (!q) return rows; return rows.filter(r => [r.nombre, r.descripcion, (r.fecha_creacion || ""), (r.fecha_modif || "")].some(v => String(v || "").toLowerCase().includes(q))) }
  async function loadTutores() { const ttl = qs("#mod-title"); ttl && (ttl.textContent = "Tutores"); const tt = qs(".tt-title"); tt && (tt.textContent = "Tutores:"); const tts = qs("#tt-status"); if (tts) { tts.textContent = "Activos"; tts.classList.remove("badge-inactivo"); tts.classList.add("badge-activo") } const hdr = qs(".recursos-box.desktop-only .table-header"); if (hdr) { const c1 = hdr.querySelector(".col-nombre"); let c2 = hdr.querySelector(".col-tutor") || hdr.querySelector(".col-tipo"); const c3 = hdr.querySelector(".col-fecha"); const c4 = hdr.querySelector(".col-status"); c1 && (c1.textContent = "Nombre"); if (c2) { c2.textContent = "DescripciÃ³n"; c2.classList.add("col-tipo") } c3 && (c3.textContent = "Fecha de creaciÃ³n"); c4 && (c4.textContent = "Status") } skeleton(); try { const res = await postJSON(API.tutores, { estatus: 1 }); const arr = Array.isArray(res) ? res : (res?.data || []); S.tutores = arr.map(t => ({ id: t.id, nombre: t.nombre, descripcion: t.descripcion, estatus: Number(t.estatus), fecha_creacion: t.fecha_creacion, fecha_modif: t.fecha_modif, _all: t })); drawTutores(); const si = qs("#search-input"); if (si && !si._gcTutorBound) { si._gcTutorBound = true; si.addEventListener("input", () => drawTutores()) } } catch (e) { const list = qs("#recursos-list"); list && (list.innerHTML = '<div style="padding:1rem;color:#b00020;">Error al cargar tutores</div>'); const m = qs("#recursos-list-mobile"); m && (m.innerHTML = "") } }
  function tutorImgCandidates(id) { const base = `../ASSETS/tutor/tutor_${Number(id)}`; return [base + ".png", base + ".jpg", base + ".webp"] }
  function attachImgFallback(imgEl, id) { const c = tutorImgCandidates(id); let i = 0; const tryNext = () => { if (i >= c.length) { imgEl.src = "data:image/svg+xml;utf8," + encodeURIComponent(noImageSvg()); return } imgEl.src = withBust(c[i++]) }; imgEl.onerror = () => tryNext(); tryNext() }
  function drawTutores() { const rows = filterTutores(S.tutores || []); renderList(rows, { desktopRow: it => `<div class="table-row" data-id="${it.id}" data-type="tutor"><div class="col-nombre"><span class="avatar" style="display:inline-flex;vertical-align:middle;margin-right:10px;width:36px;height:36px;border-radius:50%;overflow:hidden;background:#f0f0f0;border:1px solid #eee;"><img alt="${escapeAttr(it.nombre)}" style="width:100%;height:100%;object-fit:cover;" /></span><span class="name-text">${escapeHTML(it.nombre)}</span></div><div class="col-tutor">${escapeHTML(truncate(it.descripcion, 90))}</div><div class="col-fecha">${escapeHTML(fmtDateTime(it.fecha_creacion))}</div><div class="col-status">${badgeTutor(it.estatus)}</div></div>`, mobileRow: it => `<div class="table-row-mobile" data-id="${it.id}" data-type="tutor"><button class="row-toggle"><div class="col-nombre"><span class="avatar" style="display:inline-flex;vertical-align:middle;margin-right:10px;width:34px;height:34px;border-radius:50%;overflow:hidden;background:#f0f0f0;border:1px solid #eee;"><img alt="${escapeAttr(it.nombre)}" style="width:100%;height:100%;object-fit:cover;" /></span>${escapeHTML(it.nombre)}</div><span class="icon-chevron">âº</span></button><div class="row-details"><div><strong>DescripciÃ³n:</strong> ${escapeHTML(truncate(it.descripcion, 140))}</div><div><strong>CreaciÃ³n:</strong> ${escapeHTML(fmtDateTime(it.fecha_creacion))}</div><div><strong>Status:</strong> ${Number(it.estatus) === 1 ? "Activo" : "Inactivo"}</div><div style="margin:.4rem 0;"><button class="gc-btn gc-btn--ghost open-drawer">Ver detalle</button></div></div></div>`, drawerTitle: d => { const it = S.tutores.find(x => String(x.id) === d.id); return it ? "Tutor Â· " + it.nombre : "Tutor" }, drawerBody: d => renderTutorDrawer(d) });/* cargar avatars */qsa('#recursos-list .table-row[data-type="tutor"] .avatar img').forEach((img, i) => { const it = rows[(S.page - 1) * S.pageSize + i]; it && attachImgFallback(img, it.id) }); qsa('#recursos-list-mobile .table-row-mobile[data-type="tutor"] .avatar img').forEach((img, i) => { const it = rows[(S.page - 1) * S.pageSize + i]; it && attachImgFallback(img, it.id) }) }
  function renderTutorDrawer(dataset) { const it = S.tutores.find(x => String(x.id) === dataset.id); const mode = (S.currentDrawer && S.currentDrawer.mode) || (it ? "view" : "create"); const isCreate = mode === "create" || !it, isEdit = mode === "edit", isView = !isCreate && !isEdit; const t = isCreate ? { id: null, nombre: "", descripcion: "", estatus: 1 } : it ? it._all : null; if (!t) return "<p>No encontrado.</p>"; const field = (label, val, inputHTML) => '<div class="field"><div class="label">' + escapeHTML(label) + '</div><div class="value">' + ((isEdit || isCreate) ? inputHTML : escapeHTML(val != null ? val : "-")) + "</div></div>"; const inText = (id, val, ph) => '<input id="' + id + '" type="text" value="' + escapeAttr(val || "") + '" placeholder="' + escapeAttr(ph || "") + '" />', inTA = (id, val, rows) => '<textarea id="' + id + '" rows="' + (rows || 4) + '">' + escapeHTML(val || "") + "</textarea>", inSel = (id, opts) => '<select id="' + id + '">' + opts + "</select>"; const estOpts = `<option value="1"${Number(t.estatus) === 1 ? " selected" : ""}>Activo</option><option value="0"${Number(t.estatus) === 0 ? " selected" : ""}>Inactivo</option>`; let controls = ""; if (isCreate) { controls = '<div class="gc-actions"><button class="gc-btn gc-btn--ghost" id="t_cancel">Cancelar</button><button class="gc-btn gc-btn--primary" id="t_save">Guardar</button></div>' } else if (IS_ADMIN) { controls = '<div class="gc-actions">' + (isView ? '<button class="gc-btn" id="t_edit">Editar</button>' : "") + (isEdit ? '<button class="gc-btn gc-btn--ghost" id="t_cancel">Cancelar</button>' : "") + (isEdit ? '<button class="gc-btn gc-btn--primary" id="t_save">Guardar</button>' : "") + "</div>" }; let html = controls + field("Nombre", t.nombre, inText("t_nombre", t.nombre, "Nombre del tutor")) + field("DescripciÃ³n", t.descripcion, inTA("t_desc", t.descripcion, 4)) + field("Estatus", Number(t.estatus) === 1 ? "Activo" : "Inactivo", inSel("t_estatus", estOpts)); if (!isCreate) { html += `<div class="field"><div class="label">Foto</div><div class="value"><div class="media-grid"><div class="media-card"><figure class="media-thumb"><img id="tutor-img" alt="Foto" /><button class="icon-btn media-edit" id="tutor-img-edit" title="Cambiar foto"><svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.0 1.0 0 0 0 0-1.41l-2.34-2.34a1.0 1.0 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" fill="currentColor"></path></svg></button></figure><div class="media-meta"><div class="media-label">Avatar</div><div class="media-help" style="color:#666;">JPG/PNG/WebP Â· MÃ¡x 2MB</div></div></div></div></div></div>` } if (IS_ADMIN) { html += jsonSection(t, "JSON Â· Tutor", "json-tutor", "btn-copy-json-tutor") } if (isCreate) { qs("#drawer-title").textContent = "Tutor Â· Crear"; S.currentDrawer = { type: "tutor", id: null, mode: "create" } } else if (isEdit) { qs("#drawer-title").textContent = "Tutor Â· " + (it ? it.nombre : "") + " (ediciÃ³n)"; S.currentDrawer = { type: "tutor", id: it ? it.id : null, mode: "edit" } } else { qs("#drawer-title").textContent = "Tutor Â· " + (it ? it.nombre : ""); S.currentDrawer = { type: "tutor", id: it ? it.id : null, mode: "view" } } setTimeout(() => { try { disableDrawerInputs(!(isEdit || isCreate)); const id = it && it.id; if (!isCreate && id) { const img = qs("#tutor-img"); img && attachImgFallback(img, id); const btn = qs("#tutor-img-edit"); if (btn && img) { btn.addEventListener("click", () => { const input = document.createElement("input"); input.type = "file"; input.accept = "image/png,image/jpeg,image/webp"; input.style.display = "none"; document.body.appendChild(input); input.addEventListener("change", () => { const file = input.files && input.files[0]; try { document.body.removeChild(input) } catch { }; if (!file) return; const v = validarImagen(file, { maxMB: 2 }); if (!v.ok) { T(v.error, "error"); return } renderPreviewUI(btn.closest(".media-card"), file, async () => { try { const fd = new FormData(); fd.append("tutor_id", String(id)); fd.append("imagen", file); const res = await fetch(API_UPLOAD.tutorImg, { method: "POST", body: fd }); const text = await res.text().catch(() => ""); if (!res.ok) throw new Error("HTTP " + res.status + " " + (text || "")); let json; try { json = JSON.parse(text) } catch { json = { _raw: text } }; img.src = withBust((json && json.url) || (`../ASSETS/tutor/tutor_${id}.png`)); T("Foto actualizada", "exito") } catch (e) { gcLog(e); T("No se pudo subir la foto", "error") } }, () => { }) }); input.click() }) } } const be = qs("#t_edit"); be && be.addEventListener("click", e => { e.stopPropagation(); S.currentDrawer = { type: "tutor", id: id || null, mode: "edit" }; qs("#drawer-body").innerHTML = renderTutorDrawer({ id: String(id) }) }); const bc = qs("#t_cancel"); bc && bc.addEventListener("click", e => { e.stopPropagation(); if (isCreate) { closeDrawer() } else { S.currentDrawer = { type: "tutor", id: id || null, mode: "view" }; qs("#drawer-body").innerHTML = renderTutorDrawer({ id: String(id) }) } }); const bs = qs("#t_save"); bs && bs.addEventListener("click", async e => { e.stopPropagation(); if (isCreate) { const payload = { nombre: (qs("#t_nombre")?.value || "").trim(), descripcion: (qs("#t_desc")?.value || "").trim(), estatus: Number(qs("#t_estatus")?.value || 1) }; if (!payload.nombre) { T("Falta nombre", "warning"); return } try { const res = await postJSON(API.iTutor, payload); if (!res || res.ok !== true) { T("No se pudo crear el tutor", "error"); return } T("Tutor creado", "exito"); closeDrawer(); await loadTutores(); const re = (S.tutores || []).find(x => x.id === res.id); re && openDrawer("Tutor Â· " + re.nombre, renderTutorDrawer({ id: String(re.id) })) } catch (err) { gcLog(err); T("Error al crear tutor", "error") } } else { const up = { id: id, nombre: (qs("#t_nombre")?.value ?? null), descripcion: (qs("#t_desc")?.value ?? null), estatus: Number(qs("#t_estatus")?.value || 1) }; try { const res = await postJSON(API.uTutor, up); if (!res || res.ok !== true) { T("No se pudo guardar", "error"); return } T("Cambios guardados", "exito"); await loadTutores(); const re = (S.tutores || []).find(x => x.id === id); re && openDrawer("Tutor Â· " + re.nombre, renderTutorDrawer({ id: String(re.id) })) } catch (err) { gcLog(err); T("Error al guardar", "error") } } }); IS_ADMIN && bindCopyFromPre("#json-tutor", "#btn-copy-json-tutor") } catch (e) { gcLog(e) } }, 0); return html }
  /* =================== SUSCRIPCIONES =================== */
  function loadSuscripciones() { const title = qs("#mod-title"); title && (title.textContent = "Suscripciones"); const tt = qs(".tt-title"); tt && (tt.textContent = "Suscripciones:"); const tts = qs("#tt-status"); tts && (tts.textContent = "MÃ³dulo en construcciÃ³n"); const d = qs("#recursos-list"); const m = qs("#recursos-list-mobile"); d && (d.innerHTML = '<div class="empty-state" style="padding:1rem;">MÃ³dulo en construcciÃ³n</div>'); m && (m.innerHTML = ""); qs("#pagination-controls") && (qs("#pagination-controls").innerHTML = ""); qs("#pagination-mobile") && (qs("#pagination-mobile").innerHTML = "") }
  /* =================== Drawer base =================== */
  function openDrawer(title, bodyHTML) { const overlay = qs("#gc-dash-overlay"); overlay && overlay.classList && overlay.classList.add("open"); const drawer = qs("#gc-drawer"); if (!drawer) return; const t = qs("#drawer-title"); t && (t.textContent = title || "Detalle"); const b = qs("#drawer-body"); b && (b.innerHTML = bodyHTML || ""); drawer.classList && drawer.classList.add("open"); drawer.setAttribute("aria-hidden", "false") }
  function closeDrawer() { try { document.activeElement && document.activeElement.blur && document.activeElement.blur() } catch { } const overlay = qs("#gc-dash-overlay"); overlay && overlay.classList && overlay.classList.remove("open"); const drawer = qs("#gc-drawer"); if (!drawer) return; drawer.classList && drawer.classList.remove("open"); drawer.setAttribute("aria-hidden", "true"); S.currentDrawer = null; gcLog("closeDrawer") }
  /* =================== Helpers UI/format =================== */
  function escapeHTML(str) { return String(str == null ? "" : str).replace(/[&<>'"]/g, s => ({ "&": "&amp;", "<": "&lt;", ">": "&gt;", "'": "&#39;", '"': "&quot;" }[s])) }
  function escapeAttr(str) { return String(str == null ? "" : str).replace(/"/g, "&quot;") }
  function fmtDate(d) { if (!d) return "-"; try { const p = String(d).split("-"); return (p[2] || "") + "/" + (p[1] || "") + "/" + (p[0] || "") } catch { return d } }
  function fmtDateTime(dt) { if (!dt) return "-"; try { const sp = String(dt).split(" "); return (fmtDate(sp[0]) + " " + (sp[1] || "")).trim() } catch { return dt } }
  function fmtMoney(n) { try { return new Intl.NumberFormat("es-MX", { style: "currency", currency: "MXN" }).format(n) } catch { return "$" + n } }
  function pair(label, val) { return '<div class="field"><div class="label">' + escapeHTML(label) + '</div><div class="value">' + escapeHTML(val != null ? val : "-") + "</div></div>" }
  function withBust(url) { try { const u = new URL(url, window.location.origin); u.searchParams.set("v", Date.now()); return u.pathname + "?" + u.searchParams.toString() } catch { return url + (url.indexOf("?") >= 0 ? "&" : "?") + "v=" + Date.now() } }
  function noImageSvg() { return "<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 160 90'><rect width='100%' height='100%' fill='#f3f3f3'/><path d='M20 70 L60 35 L95 65 L120 50 L140 70' stroke='#c9c9c9' stroke-width='4' fill='none'/><circle cx='52' cy='30' r='8' fill='#c9c9c9'/></svg>" }
  function mediaUrlsByType(type, id) { const nid = Number(id); if (type === "noticia") { return ["/ASSETS/noticia/NoticiasImg/noticia_img1_" + nid + ".png", "/ASSETS/noticia/NoticiasImg/noticia_img2_" + nid + ".png"] } if (type === "curso") { return ["/ASSETS/cursos/img" + nid + ".png"] } if (type === "tutor") { const base = "../ASSETS/tutor/tutor_" + nid; return [base + ".png"] } return [] }
  /* JSON debug */
  function jsonSection(obj, title, preId, btnId) { const safe = escapeHTML(JSON.stringify(obj || {}, null, 2)); return '<details class="dev-json" open style="margin-top:16px;"><summary style="cursor:pointer; font-weight:600;">' + escapeHTML(title) + '</summary><div style="display:flex;gap:.5rem;margin:.5rem 0;"><button class="gc-btn" id="' + btnId + '">Copiar JSON</button></div><pre id="' + preId + '" class="value" style="white-space:pre-wrap;max-height:260px;overflow:auto;">' + safe + "</pre></details>" }
  function bindCopyFromPre(preSel, btnSel) { const btn = qs(btnSel), pre = qs(preSel); if (!btn || !pre) return; btn.addEventListener("click", async e => { e.preventDefault(); const text = pre.textContent || ""; if (!text) return T("No hay JSON para copiar", "warning"); try { await copyText(text); T("JSON copiado", "exito") } catch { try { const ta = document.createElement("textarea"); ta.value = text; ta.style.position = "fixed"; ta.style.left = "-9999px"; document.body.appendChild(ta); ta.select(); document.execCommand("copy"); document.body.removeChild(ta); T("JSON copiado", "exito") } catch { alert("No se pudo copiar") } } }) }
  function copyText(text) { if (navigator.clipboard && navigator.clipboard.writeText) { return navigator.clipboard.writeText(text) } return Promise.reject(new Error("Clipboard API no disponible")) }
  /* ValidaciÃ³n imagen + preview modal */
  function validarImagen(file, opt) { opt = opt || {}; const maxMB = opt.maxMB || 2; if (!file) return { ok: false, error: "No se seleccionÃ³ archivo" }; const allowed = ["image/jpeg", "image/png", "image/webp"]; if (allowed.indexOf(file.type) === -1) return { ok: false, error: "Formato no permitido. Solo JPG/PNG/WebP" }; const sizeMB = file.size / (1024 * 1024); if (sizeMB > maxMB) return { ok: false, error: "La imagen excede " + maxMB + "MB" }; return { ok: true } }
  function humanSize(bytes) { if (bytes < 1024) return bytes + " B"; if (bytes < 1024 * 1024) return (bytes / 1024).toFixed(1) + " KB"; return (bytes / 1024 / 1024).toFixed(2) + " MB" }
  function renderPreviewUI(cardEl, file, onConfirm, onCancel) { const url = URL.createObjectURL(file); const drawer = document.getElementById("gc-drawer"); const drawerOverlay = document.getElementById("gc-dash-overlay"); const prev = { drawerPE: drawer && drawer.style ? drawer.style.pointerEvents : "", drawerFilter: drawer && drawer.style ? drawer.style.filter : "", drawerZ: drawer && drawer.style ? drawer.style.zIndex : "", overlayZ: drawerOverlay && drawerOverlay.style ? drawerOverlay.style.zIndex : "", drawerAria: drawer ? drawer.getAttribute("aria-hidden") : null, hadInert: drawer && typeof drawer.hasAttribute === "function" ? drawer.hasAttribute("inert") : false }; const lockScroll = () => { document.body.style.overflow = "hidden" }; const overlay = document.createElement("div"); overlay.className = "gc-preview-overlay"; overlay.setAttribute("role", "dialog"); overlay.setAttribute("aria-modal", "true"); overlay.style.cssText = "position:fixed;inset:0;z-index:99999;display:flex;align-items:center;justify-content:center;background:rgba(17,24,39,.55);backdrop-filter:saturate(120%) blur(2px);"; if (drawer) { drawer.style.pointerEvents = "none"; drawer.style.filter = "blur(1px)"; drawer.style.zIndex = "1"; drawer.setAttribute("aria-hidden", "true"); try { drawer.setAttribute("inert", "") } catch { } } if (drawerOverlay && drawerOverlay.style) drawerOverlay.style.zIndex = "2"; const modal = document.createElement("div"); modal.className = "gc-preview-modal"; modal.style.cssText = "background:#fff;border-radius:14px;box-shadow:0 20px 40px rgba(0,0,0,.25);width:min(920px,94vw);max-height:90vh;overflow:hidden;display:flex;flex-direction:column;"; const header = document.createElement("div"); header.style.cssText = "display:flex;align-items:center;justify-content:space-between;gap:8px;padding:12px 16px;border-bottom:1px solid #eee;"; header.innerHTML = '<div style="font-weight:700;font-size:1.05rem;">Vista previa de imagen</div><button class="gc-btn gc-btn--ghost" data-act="close" aria-label="Cerrar" style="min-width:auto;padding:.35rem .6rem;">â</button>'; const body = document.createElement("div"); body.style.cssText = "display:grid;grid-template-columns:1fr 280px;gap:16px;padding:16px;align-items:start;"; const imgWrap = document.createElement("div"); imgWrap.style.cssText = "border:1px solid #eee;border-radius:12px;padding:8px;background:#fafafa;display:flex;align-items:center;justify-content:center;min-height:320px;max-height:60vh;"; imgWrap.innerHTML = '<img src="' + url + '" alt="Vista previa" style="max-width:100%; max-height:100%; object-fit:contain; border-radius:8px;">'; const side = document.createElement("div"); side.style.cssText = "border-left:1px dashed #e6e6e6;padding-left:16px;display:flex;flex-direction:column;gap:10px;"; side.innerHTML = '<div style="font-weight:600;">Detalles</div><div style="font-size:.92rem;color:#444;line-height:1.35;"><div><strong>Archivo:</strong> ' + file.name + "</div><div><strong>Peso:</strong> " + humanSize(file.size) + "</div><div><strong>Tipo:</strong> " + (file.type || "desconocido") + '</div><div style="margin-top:6px;color:#666;">Formatos permitidos: JPG / PNG Â· MÃ¡x 2MB</div></div><div style="margin-top:auto;display:flex;gap:8px;flex-wrap:wrap;"><button class="gc-btn gc-btn--primary" data-act="confirm">Subir</button><button class="gc-btn gc-btn--ghost" data-act="cancel">Cancelar</button></div>'; const mql = window.matchMedia && window.matchMedia("(max-width: 720px)"); const applyResponsive = () => { if (mql && mql.matches) { body.style.gridTemplateColumns = "1fr"; side.style.borderLeft = "none"; side.style.paddingLeft = "0"; imgWrap.style.minHeight = "200px" } else { body.style.gridTemplateColumns = "1fr 280px"; side.style.borderLeft = "1px dashed #e6e6e6"; side.style.paddingLeft = "16px"; imgWrap.style.minHeight = "320px" } }; mql && mql.addEventListener && mql.addEventListener("change", applyResponsive); applyResponsive(); body.appendChild(imgWrap); body.appendChild(side); modal.appendChild(header); modal.appendChild(body); overlay.appendChild(modal); document.body.appendChild(overlay); lockScroll(); const cleanup = () => { if (drawer) { if (drawer.style) { drawer.style.pointerEvents = prev.drawerPE || ""; drawer.style.filter = prev.drawerFilter || ""; drawer.style.zIndex = prev.drawerZ || "" } if (prev.drawerAria != null) drawer.setAttribute("aria-hidden", prev.drawerAria); else drawer.removeAttribute("aria-hidden"); try { if (!prev.hadInert) drawer.removeAttribute("inert") } catch { } } if (drawerOverlay && drawerOverlay.style) drawerOverlay.style.zIndex = prev.overlayZ || ""; document.body.style.overflow = ""; try { URL.revokeObjectURL(url) } catch { } try { overlay.remove() } catch { } document.removeEventListener("keydown", onEsc) }; const onEsc = e => { if (e && e.key === "Escape") { e.preventDefault(); cleanup() } }; document.addEventListener("keydown", onEsc); overlay.addEventListener("click", e => { if (e.target === overlay) cleanup() }); const btnClose = header.querySelector('[data-act="close"]'); btnClose && btnClose.addEventListener("click", cleanup); const btnCancel = side.querySelector('[data-act="cancel"]'); btnCancel && btnCancel.addEventListener("click", e => { e.preventDefault(); onCancel && onCancel(); cleanup() }); const btnConfirm = side.querySelector('[data-act="confirm"]'); btnConfirm && btnConfirm.addEventListener("click", async e => { e.preventDefault(); try { onConfirm && await onConfirm() } finally { cleanup() } }) }
  function mountReadOnlyMedia(opt) {
    const container = opt && opt.container, type = opt && opt.type, id = opt && opt.id, labels = (opt && opt.labels) || [], editableOverride = opt && opt.editable; if (!container) return; const editable = typeof editableOverride === "boolean" ? editableOverride : IS_ADMIN && S.currentDrawer && S.currentDrawer.mode === "edit"; const urls = mediaUrlsByType(type, id); const grid = document.createElement("div"); grid.className = "media-grid"; urls.forEach((url, i) => {
      const label = labels[i] || "Imagen " + (i + 1); const card = document.createElement("div"); card.className = "media-card"; const editBtnHTML = editable ? '<button class="icon-btn media-edit" title="Editar imagen"><svg viewBox="0 0 24 24" width="18" height="18" aria-hidden="true"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04a1.0 1.0 0 0 0 0-1.41l-2.34-2.34a1.0 1.0 0 0 0-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z" fill="currentColor"></path></svg></button>' : ""; card.innerHTML = '<figure class="media-thumb"><img alt="' + escapeAttr(label) + '" src="' + withBust(url) + '">' + editBtnHTML + "</figure>" + '<div class="media-meta"><div class="media-label">' + escapeHTML(label) + "</div></div>"; const img = card.querySelector("img"); if (img) img.onerror = function () { img.onerror = null; img.src = "data:image/svg+xml;utf8," + encodeURIComponent(noImageSvg()) }; if (editable) {
        const btnEdit = card.querySelector(".media-edit"); btnEdit && btnEdit.addEventListener("click", function (e) {
          e.preventDefault(); e.stopPropagation(); const input = document.createElement("input"); input.type = "file"; input.accept = "image/png, image/jpeg"; if (type === "tutor") input.accept = "image/png,image/jpeg,image/webp"; input.style.display = "none"; document.body.appendChild(input); input.addEventListener("change", async function () {
            const file = input.files && input.files[0]; try { document.body.removeChild(input) } catch { } if (!file) return; const v = validarImagen(file, { maxMB: 2 }); if (!v.ok) return T(v.error, "error"); renderPreviewUI(card, file, async function () {
              try {
                if (type === "curso") { if (!API_UPLOAD || !API_UPLOAD.cursoImg) { T("Configura API_UPLOAD.cursoImg", "warning"); return } const fd = new FormData(); fd.append("curso_id", String(id)); fd.append("imagen", file); const res = await fetch(API_UPLOAD.cursoImg, { method: "POST", body: fd }); const text = await res.text().catch(() => ""); if (!res.ok) throw new Error("HTTP " + res.status + " " + (text || "")); let json; try { json = JSON.parse(text) } catch { json = { _raw: text } }; img.src = withBust((json && json.url) || url); T("Imagen de curso actualizada", "exito"); return }
                if (type === "noticia") { if (!API_UPLOAD || !API_UPLOAD.noticiaImg) { T("Configura API_UPLOAD.noticiaImg", "warning"); return } const pos = i + 1; const fd = new FormData(); fd.append("noticia_id", String(id)); fd.append("pos", String(pos)); fd.append("imagen", file); const res = await fetch(API_UPLOAD.noticiaImg, { method: "POST", body: fd }); const text = await res.text().catch(() => ""); if (!res.ok) throw new Error("HTTP " + res.status + " " + (text || "")); let json; try { json = JSON.parse(text) } catch { json = { _raw: text } }; img.src = withBust((json && json.url) || url); T("Imagen " + pos + " de noticia actualizada", "exito"); return }
                if (type === "tutor") { if (!API_UPLOAD || !API_UPLOAD.tutorImg) { T("Configura API_UPLOAD.tutorImg", "warning"); return } const fd = new FormData(); fd.append("tutor_id", String(id)); fd.append("imagen", file); const res = await fetch(API_UPLOAD.tutorImg, { method: "POST", body: fd }); const text = await res.text().catch(() => ""); if (!res.ok) throw new Error("HTTP " + res.status + " " + (text || "")); let json; try { json = JSON.parse(text) } catch { json = { _raw: text } }; img.src = withBust((json && json.url) || url); T("Foto actualizada", "exito"); return }
              } catch (err) { gcLog(err); T("No se pudo subir la imagen", "error") }
            }, function () { })
          }); input.click()
        })
      } grid.appendChild(card)
    }); container.innerHTML = '<div class="media-head"><div class="media-title">ImÃ¡genes</div>' + (editable ? '<div class="media-help" style="color:#666;">Formatos: JPG/PNG Â· MÃ¡x 2MB</div>' : '<div class="media-help" style="color:#888;">Solo lectura</div>') + "</div>"; container.appendChild(grid)
  }
  /* =================== Toolbar/Bindings =================== */
  function bindUI() { qsa(".gc-side .nav-item").forEach(a => { a.addEventListener("click", e => { const route = a.getAttribute("data-route") || a.getAttribute("href"); if (!route) return; if (location.hash !== route) { location.hash = route } else { onRouteChange() } }) }); const drawerClose = qs("#drawer-close"); drawerClose && drawerClose.addEventListener("click", closeDrawer); const overlay = qs("#gc-dash-overlay"); overlay && overlay.addEventListener("click", e => { if (e?.target?.id === "gc-dash-overlay") closeDrawer() }); const addBtn = qs("#btn-add"); addBtn && addBtn.addEventListener("click", async () => { if (!IS_ADMIN) return; if (S.route.indexOf("#/cursos") === 0) { await openCreateCurso() } else if (S.route.indexOf("#/tutores") === 0) { openDrawer("Tutor Â· Crear", renderTutorDrawer({ id: "" })) } else if (S.route.indexOf("#/noticias") === 0) { T("Crear noticia: pendiente de implementar", "warning") } }) }
  async function openCreateCurso() { if (!IS_ADMIN) return; try { await Promise.all([getTutorsMap(), getPrioridadMap(), getCategoriasMap(), getCalendarioMap(), getTipoEvalMap(), getActividadesMap()]); S.currentDrawer = { type: "curso", id: null, mode: "create" }; openDrawer("Curso Â· Crear", renderCursoDrawer({ id: "" })) } catch (e) { gcLog(e); T("No se pudo abrir el formulario", "error") } }
  /* =================== INIT =================== */
  document.addEventListener("DOMContentLoaded", async function () { currentUser = getUsuarioFromCookie(); const uid = Number((currentUser && currentUser.id) || 0); IS_ADMIN = ADMIN_IDS.indexOf(uid) >= 0; applyAdminVisibility(IS_ADMIN); bindUI(); try { await Promise.all([getTutorsMap(), getPrioridadMap(), getCategoriasMap(), getCalendarioMap(), getTipoEvalMap(), getActividadesMap()]) } catch (e) { gcLog("catÃ¡logos init error", e) } if (!window.location.hash) window.location.hash = IS_ADMIN ? "#/cursos" : "#/cuentas"; onRouteChange() });
})();
